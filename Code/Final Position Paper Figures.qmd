---
title: "Final Position Paper Figures"
format: 
  html:
    toc: true
    toc-depth: 5
    grid:
      sidebar-width: 300px
      body-width: 2000px
      margin-width: 300px
      gutter-width: 1.5rem
execute:
  echo: false
  warning: false
  message: false
editor: 
  mode: source
---

Final plots for the 'position' paper. Organised by appearance.

## Set-up

### Packages
```{r}

library(ggplot2)
library(dplyr)
library(knitr)
library(readxl)
library(tidyr)
library(purrr)
library(stringr)
library(scales)
library(RColorBrewer)
library(gt)

```

### Filepaths
```{r, setup}

# Filepath to output plots
output_filepath <- r"(C:\Users\rfrost\OneDrive - The Institute of Cancer Research\Documents\UK-cancer-trends\Final Position Paper Figures\)"

# Filepath for data
data_filepath <- r"(C:\Users\rfrost\OneDrive - The Institute of Cancer Research\Documents\UK-cancer-trends\Data)"

# Output data 
output_data <- T

# Set working directory to data location
setwd(data_filepath)
knitr::opts_knit$set(root.dir = data_filepath)

```

### Visual Options
```{r}

# Setting theme for plots
theme_set(theme_minimal())

```

### Functions
Here are functions for reading in data. They are specified by the data source as generally data is structured in similar ways. There are exceptions to this that have lead to individual functions.

#### Main
```{r}
## Main function that grabs data depending on source and calls specific cleaning function,
data_hub <- function(country, rf){
  
  # Initialise empty dataframe
  data <- list()
  
  # Grab sheets that correspond to the risk factor of interest
  sheets <- excel_sheets(paste0(rf, "_Data.xlsx"))
  
  # Grab the subset of these sheets that correspond to the country
  spec_sheets <- sheets[grepl(sheets, pattern = country)]
  
  # Depending on the country and risk factor, use specific data reading function
  if(country == "England"){
    for(sheet in spec_sheets){
      nocol <- ncol(suppressMessages(read_excel(paste0(rf, "_Data.xlsx"), sheet = sheet)))
      tempdata <- suppressMessages(read_excel(paste0(rf, "_Data.xlsx"), sheet = sheet, col_types = c("text", rep("numeric", nocol-1))))
      group <- gsub(x = sheet, pattern = "England_", replacement = "")
      data[[paste0(rf, "-", country, "-", sheet)]] <- pull_HSE_data(data = tempdata, group = group)
      data[[paste0(rf, "-", country, "-", sheet)]]$section <- rf
    }
  } else if(country == "Scotland"){
    for(sheet in spec_sheets){
      tempdata <- suppressMessages(read_excel(paste0(rf, "_Data.xlsx"), sheet = sheet))
      group <- gsub(x = sheet, pattern = "Scotland_", replacement = "")
      data[[paste0(rf, "-", country, "-", sheet)]] <- pull_SHS_data(data = tempdata, group = group)
          data[[paste0(rf, "-", country, "-", sheet)]]$section <- rf
    }
  } else if(country == "Wales"){
    for(sheet in spec_sheets){
      tempdata <- suppressMessages(read_excel(paste0(rf, "_Data.xlsx"), sheet = sheet))
      group <- gsub(x = sheet, pattern = "Wales_", replacement = "")
      data[[paste0(rf, "-", country, "-", sheet)]] <- pull_NSW_data(data = tempdata, group = group)
      data[[paste0(rf, "-", country, "-", sheet)]]$section <- rf

    }
  } else if(country == "NIreland" & rf != "Activity"){
    for(sheet in spec_sheets){
      tempdata <- suppressMessages(read_excel(paste0(rf, "_Data.xlsx"), sheet = sheet))
      group <- gsub(x = sheet, pattern = "NIreland_", replacement = "")
      data[[paste0(rf, "-", country, "-", sheet)]] <- pull_HSNI_data(data = tempdata, group = group)
      data[[paste0(rf, "-", country, "-", sheet)]]$variable <- get_variable_HSNI(rf)
      data[[paste0(rf, "-", country, "-", sheet)]]$section <- rf
    }
    # Activity data formatted differently than other N. Ireland data so need different formatting.
  } else if(country == "NIreland" & rf == "Activity"){
    
    tempdata <- suppressMessages(read_excel(paste0(rf, "_Data.xlsx"), sheet = "NIreland_Men"))
    group <- "Men"
    data[["Activity-NIreland-Men"]] <- pull_HSNI_activity_data(data = tempdata, group = "Men")
    # data[["Activity-NIreland-Men"]]$variable <- get_variable_HSNI(rf)
    data[["Activity-NIreland-Men"]]$section <- rf
    
    tempdata <- suppressMessages(read_excel(paste0(rf, "_Data.xlsx"), sheet = "NIreland_Women"))
    group <- "Women"
    data[["Activity-NIreland-Women"]] <- pull_HSNI_activity_data(data = tempdata, group = "Women")
    # data[["Activity-NIreland-Women"]]$variable <- get_variable_HSNI(rf)
    data[["Activity-NIreland-Women"]]$section <- rf

    
    tempdata <- suppressMessages(read_excel(paste0(rf, "_Data.xlsx"), sheet = "NIreland_All"))
    group <- "All"
    data[["Activity-NIreland-All"]] <- pull_HSNI_data(data = tempdata, group = "All")
    data[["Activity-NIreland-All"]]$variable <- get_variable_HSNI(rf)
    data[["Activity-NIreland-All"]]$section <- rf
    
  } else {
    stop("ERROR: Invalid country chosen")
  }
  
  return(data)
}

```

#### England Health Survey
```{r}

pull_HSE_data <- function(data, group){
  
  # Edit for activity data format
  if(is.na(data[2,2])){
    data <- data[-1,]
  }
  
  # Remove weighted bases - can alter to keep
  if("Weighted bases" %in% data$...1){
    data <- data[1:(which(data$`...1`=="Weighted bases")-1),]
  } else if("Bases (weighted)" %in% data$...1){
    data <- data[1:(which(data$`...1`=="Bases (weighted)")-1),]
  }
  
  # Get cat columns
  ranges <- data$...1[is.na(data[,2])]
  rangesdif <- diff(which(is.na(data[,2]))) # Getting number of categories for each group - they should be equal!
  
  # All groups should have the same number of categories - if not we need to throw an error
  if(max(rangesdif) != min(rangesdif)){
    return(cat("ERROR: Inconsistent Data Format"))
  }
  
  # Add age groups and pivot longer
  data <- data |>
    mutate(age_group = rep(ranges, each = rangesdif[1])) |>
    filter(!`...1` %in% ranges) |>
    pivot_longer(cols = colnames(data)[2:ncol(data)]) |>
    rename(year = name, variable = `...1`)
  
  # Manually add country and group
  data[["country"]] <- "England"
  data[["group"]] <- group
  
  # Smoking data for some reason is ordered oppositely, so made quick fix here.
  if("Current cigarette smoker" %in% data[["age_group"]] | "Currently uses e-cigarettes" %in% data[["age_group"]] ){
    data <- data |>
      rename(temp_age = variable, temp_var = age_group) |>
      rename(age_group = temp_age, variable = temp_var)
  }
  
  return(data)
  
}

```

#### England Health Survey (Diabetes Data)
```{r}

pull_HSE_diabetes_data <- function(data, group){
  
  # Remove weighted bases - can alter to keep
  if("Weighted bases" %in% data$...1){
    data <- data[1:(which(data$`...1`=="Weighted bases")-1),]
  }
  
  # Rename first column
  colnames(data) <- c("age_group", colnames(data)[2:ncol(data)])
  
  # Remove first row
  data <- data[-1,]
  
  # Pivot longer
  data <- data |>
    pivot_longer(cols = colnames(data)[2:ncol(data)]) |>
    rename(year = name)
  
  # Manually name country, group and variable
  data[["country"]] <- "England"
  data[["group"]] <- group
  data[["variable"]] <- "% Diabetes"
  
  return(data)
  
}

```

#### Scottish Health Survey
```{r}

pull_SHS_data <- function(data, group){
  
  # SHS data is either stratified by sex or age
  if(group == "Sex"){
    data <- data |>
      select(year = Year, country = Geographylevel, variable = Categories, 
             group = Sex, value = Percent) |>
      mutate(age_group = "16+")
  } else if(group == "Age"){
    data <- data |>
      select(year = Year, country = Geographylevel, 
             variable = Categories, value = Percent, age_group = Age) |>
      mutate(group = "All adults")
  }
  
  return(data)
  
}

```

#### National Survey for Wales
```{r}

pull_NSW_data <- function(data, group){
  
  # Welsh data is split by year, so the 'group' input corresponds to the year of the survey
  year_input <- group
  
  # Initialise dataframe by transposing data
  data <- as.data.frame(t(as.matrix(data, dimnames = NULL)))
  
  # Cleaning dataframe
  rownames(data) <- NULL
  data[data=="."] <- NA
  
  # Age groups are in hierachical struture, collapsing this
  data <- data |>
    mutate(V2 = case_when(
      is.na(V2) ~ V1,
      TRUE ~ V2
    ), V3 = case_when(
      is.na(V3) ~ V2,
      TRUE ~ V3
    )) |>
    select(-V1, -V2)
  
  # Adding column name and removing first two rows
  colnames(data) <- c("age_group", data[2,2:ncol(data)])
  data <- data[-c(1,2),]
  
  
  data <- data |>
    mutate(group = rep(c("All", "Men", "Women"), each = 11),
           year = year_input,
           country = "Wales") |>
    pivot_longer(cols = colnames(data)[2:ncol(data)]) |>
    rename(variable = name)
  
  return(data)
}

```

#### Health Survey Northern Ireland
```{r}

pull_HSNI_data <- function(data, group){
  
  colnames(data)[1] <- "age_group"
  
  data <-  data |>
    pivot_longer(cols = colnames(data)[2:ncol(data)]) |>
    rename(year = name) |>
    mutate(country = "N. Ireland",
           group = {{group}})
  
  return(data)
}

# Activity data is different, so need a slightly different function to take care of this special case
pull_HSNI_activity_data <- function(data, group){

  colnames(data)[1] <- "variable"
  
  data <-  data |>
    pivot_longer(cols = colnames(data)[2:ncol(data)]) |>
    rename(year = name) |>
    mutate(country = "N. Ireland",
           group = {{group}},
           age_group = "19+") # Table specifies 19+ participants.
  
  return(data)
}

# HSNI doesn't store variable information, so it must be inferred from the section.
# For alcohol etc, drinking over guidelines is from an _alt dataset which is treated seperately. 
get_variable_HSNI <- function(rf){
  section <- rf
  variable <- case_when(
    section == "BMI" ~ "Overweight",
    section == "Alcohol" ~ "Drink",
    section == "Smoking" ~ "Smoke",
    section == "E_Cigarette" ~ "E-Cigarette Use",
    section == "Activity" ~ "Meets Recommendations",
    TRUE ~ "ERROR"
  )
}

```

#### Recent APC Table Function
```{r}

apc_table <- function(data_jp){
  
  # Initialise table
  apc_table <- data.frame(Cancer = character(0), period_women = character(0), apc_women = character(0), period_men = character(0), apc_men = character(0))

  # Loop through cancer locations and sexes, adding to the table sequentially

  for(cancer in unique(data_jp$Cancer_Site)){

    # Initialise row for output
    output_row <- cancer

    for(sex in c("Women", "Men")){

      # Filter data to data on sex and cancer of interest
      spec_data <- filter(data_jp, Sex == sex & Cancer_Site == cancer)

      # If no data - output NA's, else calculate period of most recent APC and APC
      if(nrow(spec_data)==0){
        output_row <- append(output_row, rep(NA, 2))
      } else {

        # Arrange by year and take the last APC segment
        spec_data <- arrange(spec_data, Year)

        join_years <- spec_data$Year[is.na(spec_data$APC)]

        # If joins, take the final segment, if not then leave the data alone
        if(length(join_years)>0){
          spec_data <- spec_data[spec_data$Year>=max(join_years),]
        }

        # Period
        period <- paste0(min(spec_data$Year), "-", max(spec_data$Year))

        # APC
        apc <- unique(spec_data$APC)[!is.na(unique(spec_data$APC))]

        if(length(apc)>1){
          stop("ERROR: final join not detected")
        }

        # Make APC pretty
        if(grepl(apc, pattern = "\\*")){
          numeric_apc <- gsub(apc, pattern = "\\*", replacement = "")
          numeric_apc <- round(as.numeric(numeric_apc), digits = 2)
          apc <- paste0(numeric_apc, "%*")
        } else {
          apc <- paste0(round(as.numeric(apc), digits = 2), "%")
        }


        # create output row
        output_row <- append(output_row, c(period, apc))

      }

    }

    apc_table[nrow(apc_table)+1,] <- output_row

  }
  
  # Manipulate table so it is ready for plotting
  apc_table <- data.frame(Cancer = rep(apc_table$Cancer, 2), sex = rep(c("women", "men"), each = length(unique(apc_table$Cancer))), apc = c(apc_table$apc_women, apc_table$apc_men), period = c(apc_table$period_women, apc_table$period_men))
  
  apc_table <- apc_table |> 
    # pivot_longer(cols = c(apc_women, apc_men)) |>
    mutate(
      
      # sex = gsub(name, pattern = "apc\\_", replacement = ""),
      
      sex = ifelse(sex == "men", "Men", "Women"),
      
      apc = gsub(apc, pattern = "\\%", replacement = ""),
      
      significant = grepl(apc, pattern = "\\*"),
      
      apc = as.numeric(gsub(apc, pattern = "\\*", replacement = "")),
      
      period = ifelse(is.na(period), NA, paste0("(", period, ")"))
      
    ) |>
    # Reorder Cancer label so plot is nicer
    arrange(desc(Cancer)) |>
    mutate(Cancer = factor(Cancer, levels = unique(Cancer)))
  
  # Grab max apc so we can scale plot with period annotations
  max_apc <- max(apc_table$apc, na.rm = T)

  return(apc_table)
  
}

```

#### Recent APC Barchart Function
```{r}

apc_barchart <- function(data_jp, title){
  
  # Initialise table
  apc_table <- data.frame(Cancer = character(0), period_women = character(0), apc_women = character(0), period_men = character(0), apc_men = character(0))

  # # Relabel sex variable to be easier to understand
  # data_jp <- data_jp |>
  #   mutate(Sex = if_else(Sex == 2, "Women", "Men"))

  # Loop through cancer locations and sexes, adding to the table sequentially

  for(cancer in unique(data_jp$Cancer_Site)){

    # Initialise row for output
    output_row <- cancer

    for(sex in c("Women", "Men")){

      # Filter data to data on sex and cancer of interest
      spec_data <- filter(data_jp, Sex == sex & Cancer_Site == cancer)

      # If no data - output NA's, else calculate period of most recent APC and APC
      if(nrow(spec_data)==0){
        output_row <- append(output_row, rep(NA, 2))
      } else {

        # Arrange by year and take the last APC segment
        spec_data <- arrange(spec_data, Year)

        join_years <- spec_data$Year[is.na(spec_data$APC)]

        # If joins, take the final segment, if not then leave the data alone
        if(length(join_years)>0){
          spec_data <- spec_data[spec_data$Year>=max(join_years),]
        }

        # Period
        period <- paste0(min(spec_data$Year), "-", max(spec_data$Year))

        # APC
        apc <- unique(spec_data$APC)[!is.na(unique(spec_data$APC))]

        if(length(apc)>1){
          stop("ERROR: final join not detected")
        }

        # Make APC pretty
        if(grepl(apc, pattern = "\\*")){
          numeric_apc <- gsub(apc, pattern = "\\*", replacement = "")
          numeric_apc <- round(as.numeric(numeric_apc), digits = 2)
          apc <- paste0(numeric_apc, "%*")
        } else {
          apc <- paste0(round(as.numeric(apc), digits = 2), "%")
        }


        # create output row
        output_row <- append(output_row, c(period, apc))

      }

    }

    apc_table[nrow(apc_table)+1,] <- output_row

  }
  
  # Manipulate table so it is ready for plotting
  apc_table <- data.frame(Cancer = rep(apc_table$Cancer, 2), sex = rep(c("women", "men"), each = length(unique(apc_table$Cancer))), apc = c(apc_table$apc_women, apc_table$apc_men), period = c(apc_table$period_women, apc_table$period_men))
  
  apc_table <- apc_table |> 
    # pivot_longer(cols = c(apc_women, apc_men)) |>
    mutate(
      
      # sex = gsub(name, pattern = "apc\\_", replacement = ""),
      
      sex = ifelse(sex == "men", "Men", "Women"),
      
      apc = gsub(apc, pattern = "\\%", replacement = ""),
      
      significant = grepl(apc, pattern = "\\*"),
      
      apc = as.numeric(gsub(apc, pattern = "\\*", replacement = "")),
      
      period = ifelse(is.na(period), NA, paste0("(", period, ")"))
      
    ) |>
    # Reorder Cancer label so plot is nicer
    arrange(desc(Cancer)) |>
    mutate(Cancer = factor(Cancer, levels = unique(Cancer)))
  
  # Grab max apc so we can scale plot with period annotations
  max_apc <- max(apc_table$apc, na.rm = T)

  return(apc_table)
  
  
  # Create plot
  plot <- apc_table |>
    ggplot(aes(x = Cancer, y = apc, fill = sex)) +
    geom_bar(stat = "identity", position = position_dodge(), colour = "black") +
    geom_hline(yintercept = 0) +
    ggtitle(title) +
    ylab("APC") +
    scale_fill_discrete(name = "Sex") +
    geom_text(aes(label = ifelse(significant, "*", ""),
                hjust = ifelse(apc>0, -0.1, 1.1)),
            position = position_dodge(width = 0.9),
            vjust = 0.8,
            size = 6) +
    geom_text(aes(label = period,
                    y = max_apc +1),
              position = position_dodge(width = 0.9),
              vjust = 0.38) +
    labs(caption = "* Indicates an APC significantly different from 0",
       y = "Annual Percentage Change (APC)") +
    ylim(NA, max_apc+2)  +
    coord_flip()
    
    
  

  return(plot)

}


```


#### Full Joinpoint Table Function
```{r}

apc_full_table <- function(data_jp, title = NA){
  
  
  # Initialise output table
  output_table <- data.frame(Site = character(0), Sex = character(0), JP_N = numeric(0), JP_years = character(0), APC = numeric(0), Significant = character(0))
  
  for(cancer in unique(data_jp$Cancer_Site)){

    for(sex in c("Women", "Men")){
      
      # Initialise row for output
      output_row <- c(cancer, sex)

      # Filter data to data on sex and cancer of interest
      spec_data <- filter(data_jp, Sex == sex & Cancer_Site == cancer)

      # If no data - output NA's, else calculate period of most recent APC and APC
      if(nrow(spec_data)==0){
        output_row <- append(output_row, c(1, rep(NA, 3)))
        
        output_table <- rbind(output_table, output_row)
        
      } else {

        # Arrange by year
        spec_data <- arrange(spec_data, Year)
        
        # Find join years
        join_years <- spec_data$Year[is.na(spec_data$APC)]
        join_years <- c(min(spec_data$Year), join_years, max(spec_data$Year))

        # Total number of joins
        no_segments <- spec_data$Joinpoints[1] + 1
        
        for(i in 1:no_segments){
          
          # Filter data to join
          spec_data_join <- spec_data[spec_data$Year > join_years[i] & spec_data$Year < join_years[i+1],]
          
          # Add join no. to output
          output_row_join <- append(output_row, i)
          
          # Add years of the join to output
          output_row_join <- append(output_row_join, paste0("(", join_years[i], ", ", join_years[i+1], ")"))
          
          # Add APC of the join to output
          output_row_join <- append(output_row_join, gsub(spec_data_join$APC[1], pattern = "\\*", replacement = ""))
          
          # Add significant indicator to output
          output_row_join <- append(output_row_join, if_else(grepl(spec_data_join$APC[1], pattern = "\\*"), "YES", "NO"))
          
          # Append row onto dataframe
          output_table <- rbind(output_table, output_row_join)
          
        }

      }

    }
    
  }
  
  # Readd in column names - rbind removes them
  colnames(output_table) <- c("Site", "Sex", "Segment Number", "Years", "APC", "Significant")
  
  # Max number of segments
  max_segments <- max(output_table$`Segment Number`)
  
  # Pivot wider
  output_table <- output_table |>
    pivot_wider(id_cols = c(Site, Sex), names_from = `Segment Number`, values_from = c(Years, APC, Significant), names_vary = "slowest") |>
    mutate_all(~ replace_na(., "-"))

  
  # gt and make 'pretty'
  output_table_gt <- output_table |>
    gt()
  
  # For each segment, make a tab spanner
  for(i in 1:max_segments){
    output_table_gt <- tab_spanner(output_table_gt, label = paste0("Segment ", i), columns = ends_with(paste0("_", i)))
    output_table_gt <- cols_width(output_table_gt, as.formula(paste0("Years_", i, "~ px(140)")))
  }

  # Define the new column names
  column_names <- names(output_table)
  new_names <- sub("_\\d+$", "", column_names)

  # Create a named vector for cols_label()
  rename_vector <- setNames(new_names, column_names)

  # Rename columns using cols_label
  output_table_gt <- output_table_gt |>
      cols_label(!!!rename_vector)
  
  output_table_gt <- output_table_gt |>
    tab_header(
      title = md(paste0("**",ifelse(is.na(title), "", title),"**"))
    ) |>
    # Column headers
    tab_style(
    style = list(
      cell_text(weight = "bold", align = "center")
    ),
    locations = cells_column_labels(everything())
    ) |>
    # Body rows
    tab_style(
      style = list(
        cell_text(align = "center")
      ),
      locations = cells_body(
          columns = c(paste0(c("Years_", "APC_", "Significant_"), rep(1:max_segments, each = 3)))
      )
    ) |>
    # Line between sex column and rest of table
    tab_style(
      style = cell_borders(
        sides = c("right"),
        weight = px(0.5),
        color = "lightgrey"),
      locations = cells_body(
        columns = Sex)) |>
    cols_width(Sex ~ px(120))
  
  # Add colours to significant column to show if significant or not
  for(i in 1:max_segments){
    
    column <- sym(paste0("Significant_", i))
    
    output_table_gt <- output_table_gt |>
      tab_style(
        style = list(
          cell_fill(color = "#ef5350")
          ),
        locations = cells_body(
          columns = column,
          rows = !!column == "NO"
        )
      ) |>
      tab_style(
        style = list(
          cell_fill(color = "#C8E870FF")
          ),
        locations = cells_body(
          columns = column,
          rows = !!column == "YES"
        )
      )
  }
    
  
  return(output_table_gt)
  
   
}


```

#### Meeting Mortality Target Table Generation
```{r}


meet_targets_table <- function(targets, target.year, target.start = NA, data_jp, title = NA){

  output.table <- data.frame(Cancer = character(0), Sex = character(0), APC_Req = character(0), Pace = character(0), Full_Change = character(0), Year_Ach = character(0))

  for(cancer in unique(data_jp$Cancer_Site)){
    for(sex in unique(data_jp$Sex)){
      
      # Filter data to sex and cancer of interest
      temp_data <- data_jp |>
        filter(Cancer_Site == cancer, Sex == sex)
      
      if(nrow(temp_data)>0){
        
        # Get final APC to extrapolate from
        finalAPC <- temp_data |>
          arrange(desc(Year)) |>
          filter(row_number()==1) |>
          pull(APC)
        
        finalAPC <- as.numeric(gsub(finalAPC, pattern = "\\*", replacement = ""))
        
        # Go from APC to percentage change mulitplier
        finalAPC_num <- 1+finalAPC/100
        
        finalyear <- temp_data |>
          arrange(desc(Year)) |>
          filter(row_number()==1) |>
          pull(Year)
        
        # If a target start year is given, then use that
        if(!is.na(target.start)){
          finalyear <- target.start
        }
        
        # Years left until target year
        yearsremaining <- target.year  - finalyear
        
        total_change_num <- finalAPC_num^(yearsremaining)
        
        total_change <- 100*(total_change_num-1)
        
        yearachieved <- ifelse(finalAPC_num<1, floor(log(targets)/log(finalAPC_num)) + finalyear, "Inf")
          
        goalAPC <- targets^(1/yearsremaining)
        
        goalAPC <- 100*(goalAPC-1)
        
        new_row <- c(cancer, sex, round(goalAPC, digits = 3),  round(finalAPC, digits = 3),  round(total_change, digits = 3), yearachieved)

      } else {
        
        new_row <- c(cancer, sex, "-", "-", "-", "-")
        
      }
      
      output.table[nrow(output.table)+1,] <- new_row
      
    }
  }
  
  output.table <- output.table |>
    gt() |>
    # Header Creation
    tab_header(
      title = md(if_else(is.na(title), "**Globocan JoinPoint Target Analysis**", paste0("**", title, "**"))),
      subtitle = paste0("For a Goal of a 15% Reduction in Mortality by 2040", if_else(is.na(target.start), "", paste0(" from ", target.start)))
    ) |>
    
    # Head Rows
    tab_style(
      style = list(
        cell_text(weight = "bold", align = "center")
      ),
      locations = cells_column_labels(columns = everything())
    ) |>
    
    # Body rows
    tab_style(
      style = list(
        cell_text(align = "center")
      ),
      locations = cells_body(
          columns = everything()
      )
    ) |>
    # Colour final column based on if target is reached
    tab_style(
      style = list(
        cell_text(color = "#D83800FF", weight = "bold")
      ),
      locations = cells_body(
        columns = Year_Ach,
        rows = Year_Ach == "Inf" | suppressWarnings(as.numeric(Year_Ach)) > target.year
      )
    ) |>
    tab_style(
      style = list(
        cell_text(color = "#489838FF", weight = "bold")
      ),
      locations = cells_body(
        columns = Year_Ach,
        rows = suppressWarnings(as.numeric(Year_Ach)) <= target.year
      )
    ) |>
    
    # Rename columns
    cols_label(
      APC_Req = "APC Required",
      Pace = "Current APC",
      Full_Change = "Total Change",
      Year_Ach = "Year Achieved"
    ) 
    
  
  return(output.table)

}


```

### Additional Wales Data
Additional Wales data has been included past the original 4 years. It it all loaded in this chunk so that data can be drawn from it when it is needed.
```{r}

whs_data <- read_excel("Wales_Health_Survey_Data.xlsx")

names_to_pivot <- colnames(whs_data)[-c(1,2)]

whs_data <- whs_data |>
  filter(!is.na(...2)) |>
  mutate(across(.cols = !contains("..."), .fns = as.numeric)) |>
  mutate(group = rep(c("Men", "Women", "All"), each = 12)) |>
  rename(year = ...2) |>
  select(-...1) |>
  pivot_longer(cols = all_of(names_to_pivot)) |>
  rename(variable = name) |>
  filter(!is.na(value)) |>
  mutate(
    
    age_group = "16+",
    
    # Choosing a section for the variables we want to export - not all are applicable
    section = case_when(
      variable == "Smoker (1)" ~ "Smoking",
      variable == "Currently use an e-cigarette (2)" ~ "E_Cigarette",
      variable == "Overweight or obese (9)" ~ "BMI",
      variable == "Obese (10)" ~ "BMI",
      variable == "Exercise or physical activity done (new questions): Active for 150 minutes or more in the previous week (8)" ~ "Activity",
      variable == "Exercise or physical activity done (new questions): Active for less than 30 minutes in the previous week (8)" ~ "Activity",
      TRUE ~ NA),
    
    # Linking variables to pre established variable names
    variable = case_when(
      section == "Smoking" ~ "% Current Smoker",
      section == "E_Cigarette" ~ "% Current E-cigarette user",
      section == "BMI" & variable == "Overweight or obese (9)" ~ "% Overweight",
      section == "BMI" & variable == "Obese (10)" ~ "% Obese",
      section == "Activity" & variable == "Exercise or physical activity done (new questions): Active for 150 minutes or more in the previous week (8)" ~ "% Meets Guidelines",
      TRUE ~ NA),
    
    country = "Wales",
    
    # Choosing the later year for consistency with NSW data, which I believe is a continuation
    year = if_else(grepl(year, pattern = "\\/"), as.numeric(str_sub(year, start = 1, end = 4))+1, as.numeric(year))
    
    ) |>
  
  filter(!is.na(variable))

```

## Plot Generation

### Main

#### Figure 1
Figure 1 is a plot showing the trend of incidence rates for all cancers combined (excl. NMSC) by country

**Data Sources:**\
England - NHS England\
Scotland - NHS Scotland\
Northern Ireland - QUB Northern Ireland Cancer Registry\
Wales - Public Health Wales

```{r, fig.width=8, fig.height=4.5}

# Reading in data
cancer_data <- read.csv(r"(C:\Users\rfrost\OneDrive - The Institute of Cancer Research\Documents\UK-cancer-trends\Data\Cancer Trends\Source Data\Cancer_Incidence_Data.csv)")

# Filtering to data needed for figure
figure1_data <- cancer_data |>
  filter(Cancer_Site == "All sites excl. NMSC", between(Year, 2000, 2019))

# Plot Figure 1
ggplot(figure1_data, aes(x = Year, y = ASR, colour = Country)) +
  geom_line() + 
  geom_point() +
  theme(legend.position="bottom",
        legend.box = "vertical",
        axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major.x = element_line(color = "grey92", size = 0.5),  # Adjust grid lines
        panel.grid.minor.x = element_blank()) +
  facet_grid(~ Sex) +
  scale_x_continuous(breaks = seq(1998, max(figure1_data$Year), by = 2))

# Save figure
ggsave(filename = paste0(output_filepath, "Figure 1 - All Cancer Incidence.png"), width = 8, height = 4.5, bg = "white")



# Write cancer incidence data to output
write.csv(cancer_data, r"(Z:\Generations\Projects\UK Cancer Trends\Data\Cancer Incidence Trends.csv)", row.names = F)



```

#### Figure 2
Figure 2 consists of four plots showing recent trends in APC by cancer site combined.

**Data Sources:**\
England - NHS England\
Scotland - NHS Scotland\
Northern Ireland - QUB Northern Ireland Cancer Registry\
Wales - Public Health Wales

```{r, fig.width=10, fig.height=16}

# Read in Joinpoint Output
incidence_jp <- read.delim(r"(C:\Users\rfrost\OneDrive - The Institute of Cancer Research\Documents\UK-cancer-trends\Data\Cancer Trends\Source Data\Cancer_Incidence_Data_Joinpoint.txt)", sep = "\t")

# Group by country and prepare data
figure2_data <- incidence_jp |>
  group_by(Country) |>
  do(apc_table(.))

# Plot Figure 2
ggplot(figure2_data, aes(x = Cancer, y = apc, fill = sex)) +
    geom_bar(stat = "identity", position = position_dodge(), colour = "black") +
    geom_hline(yintercept = 0) +
    ylab("APC") +
    scale_fill_discrete(name = "Sex") +
    geom_text(aes(label = ifelse(significant, "*", ""),
                hjust = ifelse(apc>0, -0.1, 1.1)),
            position = position_dodge(width = 0.9),
            vjust = 0.8,
            size = 6) +
    geom_text(aes(label = period,
                    y = max(apc, na.rm = T) +1),
              position = position_dodge(width = 0.9),
              vjust = 0.38) +
    labs(caption = "* Indicates an APC significantly different from 0",
       y = "Annual Percentage Change (APC)") +
    ylim(NA, max(figure2_data$apc, na.rm = T)+2)  +
    coord_flip() +
    geom_rect(aes(xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf),
              colour = "black", fill = NA, inherit.aes = FALSE) +
    facet_wrap(~ Country, ncol = 1) +
    theme(strip.text = element_text(face = "bold"))


# Save Plot
ggsave(filename = paste0(output_filepath, "Figure 2 - Cancer APC by Country.png"), bg = "white", height = 16, width = 10)

```


### Supplement

#### Figure 1
Supplement Figure 1 consists of plotting cancer incidence for all sites of interest

**Data Sources:**\
England - NHS England\
Scotland - NHS Scotland\
Northern Ireland - QUB Northern Ireland Cancer Registry\
Wales - Public Health Wales

```{r, fig.width=8, fig.height=16}

# Using cancer_data from Figure 1, filter to data needed for plot
supp_figure1_data <- cancer_data |>
  filter(Cancer_Site != "All sites excl. NMSC", between(Year, 2000, 2019))

# Plot supplement figure 1
ggplot(data = supp_figure1_data, aes(x = Year, y = ASR, colour = Country)) +
  geom_line() +
  geom_point() +
  ggtitle(paste0("Cancer Incidence Rates")) +
  theme(legend.position="bottom",legend.box = "vertical") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major.x = element_line(color = "grey92", size = 0.5),  # Adjust grid lines
        panel.grid.minor.x = element_blank()) +
  facet_grid(Cancer_Site ~ Sex, scales = "free_y") +
  scale_x_continuous(breaks = seq(1998, max(cancer_data$Year), by = 2))

ggsave(filename = paste0(output_filepath, "Supplement Figure 1 - Cancer Trends All Sites.png"), height = 16, width = 8, bg = "white")

```

#### Figure 2
Supplement Figure 2 consists of 3 graphs

- Plotting parity over time

- Plotting age at first birth over time

- Plotting HRT usage over time


##### Parity

**Data Sources:**\
England and Wales (Population Estimates) - ONS\
England and Wales (Parity) - ONS

```{r, fig.width=8, fig.height=4.5}

# Read in population size data
pop_data <- suppressMessages(read_excel("Population_Data.xlsx")) |>
  filter(Sex == "Females", Age != "All Ages") |>
  select(-Sex) 

# Manipulate population data to useable format
pop_data <- as.data.frame(t(as.matrix(pop_data))) 
colnames(pop_data) <- pop_data[1,]
pop_data$year <- rownames(pop_data)
pop_data <- pop_data[-1,] |>
  mutate(year = gsub(year, pattern = "Mid-", replacement = "")) |>
  sapply(as.numeric)
 
# Filter to post 1970
pop_data <- as.data.frame(pop_data) |>
  filter(year>1970)

# Loop over rows and normalise each one to get proportions
for(i in 1:nrow(pop_data)){
  pop_data[i,which(colnames(pop_data)!="year")] <- pop_data[i,which(colnames(pop_data)!="year")]/sum(pop_data[i,which(colnames(pop_data)!="year")])
}

# Pivot population data
pop_data <- pop_data |>
  pivot_longer(cols = colnames(pop_data)[colnames(pop_data)!="year"])

# Read in parity data
parity_data <- suppressMessages(read_excel("Parity_Data.xlsx", sheet = "England_Wales_Parity")) |>
  mutate(flag =  case_when(
    is.na(`Age exact years`) ~ "Final",
    TRUE ~ NA),
    parous = 100 - `0 (No children)`,
    YOB = as.numeric(`Year of birth of woman`),
    age = as.numeric(`Age exact years`),
    year = YOB + age)

# Initialise empty dataframe for final parity data
parity <- data.frame(year = integer(0), parity = integer(0))

# Loop through years, calculating % parity in each year
for(y in 2010:2022){
  tempdata <- as.data.frame(parity_data) # Initialising temporary data
  tempdata$finalage <- ifelse(parity_data$flag=="Final", y - tempdata$YOB, NA) # Calculating age at year for 'final' parity statistics (final parity data for birth cohort)
  tempdata <- filter(tempdata, year == y|finalage>45) # Filtering data to data collected in the year, or cohorts who have 'completed' parity statistic measurement
  tempdata$age <- ifelse(is.na(tempdata$age), tempdata$finalage, tempdata$age) 
  over90 <- mean(tempdata$parous[tempdata$age>89]) # Taking mean over 90+ as population data groups them
  tempdata <- tempdata[tempdata$age<90,] # Filtering out over 90
  tempdata <- select(tempdata, age, parous)
  tempdata[nrow(tempdata)+1,] <- c("90+", over90) # Adding in over 90 statistic
  tempdata$parous <- as.numeric(tempdata$parous)
  temppop <- pop_data[pop_data$year==y,] # Grabbing population distribution for the year
  df <- merge(tempdata, temppop, by.x = "age", by.y = "name") # Merge population distribution to parity data
  df$relpar <- df$parous*df$value 
  parity[nrow(parity)+1,] <- c(y, sum(df$relpar)) # Add in parity data to final parity dataframe along with year
}

supp_figure2a_data <- parity

supp_figure2a_data |>
  ggplot(aes(x = year, y = parity)) +
  geom_point() +
  geom_line() +
  ylab("Parity (%)") +
  xlab("Year") +
  ggtitle("Parity in England and Wales") +
  scale_x_continuous(breaks = 2002:2022, limits = c(2002,2022)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major.x = element_line(color = "grey92", size = 0.5),  # Adjust grid lines
        panel.grid.minor.x = element_blank()) +
  ylim(55, 57)

# Save plot
ggsave(filename = paste0(output_filepath, "Supplement Figure 2(a) - Parity Trends.png"), width = 8, height = 4.5, bg = "white")


# Create output data file and write parity data to it
data_rf_output <- supp_figure2a_data |>
  # Need to add additional columns that will be needed for other variables
  mutate(
    
    value = parity,
    
    country = "England and Wales",
    
    variable = "% Parity",
    
    sex = "Women",
    
    age_group = "20+"
    
  ) |>
  select(variable, country, sex, year, age_group, value)



```

##### Age at First Birth

**Data Sources:**\
England and Wales (Population Estimates) - ONS\
England and Wales (Parity) - ONS

```{r, fig.width=8, fig.height=4.5}

# Read in data
afb_data <- read_excel("Age_First_Birth_Data.xlsx")[2:3,13:31]

# Clean data
colnames(afb_data) <- afb_data[1,]
afb_data <- afb_data[2,]

supp_figure2b_data <- afb_data |>
  pivot_longer(cols = colnames(afb_data)) |>
  mutate(Year = as.numeric(name), value = as.numeric(value)) 

# Plot Supplementary Figure 2(b)
supp_figure2b_data |>
  ggplot(aes(x = Year, y = value)) +
  geom_line() +
  geom_point() +
  ylab("Average Age at First Birth") +
  ggtitle("Average Age at First Birth in UK") +
  scale_x_continuous(breaks = 2002:2022, limits = c(2002,2022)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major.x = element_line(color = "grey92", size = 0.5),  # Adjust grid lines
        panel.grid.minor.x = element_blank()) +
  ylim(25, 30)

# Save plot
ggsave(filename = paste0(output_filepath, "Supplement Figure 2(b) - Age at First Birth Trends.png"), width = 8, height = 4.5, bg = "white")



# Add figure data to output
data_temp_output <- supp_figure2b_data |>
  mutate(
    
    year = Year,
    
    variable = "Age at First Birth",
    
    country = "UK",
    
    age_group = NA,
    
    sex = "Women"
    
  ) |>
  select(variable, country, sex, year, age_group, value)

data_rf_output <- rbind(data_rf_output, data_temp_output)



```

##### HRT

**Data Sources:**\
England - NHS BSA

```{r, fig.width=8, fig.height=4.5}

# Read in data
hrt_data <- read_excel("HRT_Data.xlsx") 

# Clean data
supp_figure2c_data <- hrt_data |>
  mutate(Year = as.numeric(map_chr(strsplit(`Financial Year`, "/"), 1)), 
         `% HRT` = as.numeric(`Patients per 1,000 Population`)/10) |>
  filter(!is.na(`% HRT`))

supp_figure2c_data |>
  ggplot(aes(x = Year, y = `% HRT`)) +
  geom_line() +
  geom_point() +
  xlab("Year") +
  ylab("HRT (%)") +
  ggtitle("HRT Usage in England") +
  scale_x_continuous(breaks = min(supp_figure2c_data$Year):max(supp_figure2c_data$Year)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major.x = element_line(color = "grey92", size = 0.5),  # Adjust grid lines
        panel.grid.minor.x = element_blank()) +
  ylim(2, 4)


# Save plot
ggsave(filename = paste0(output_filepath, "Supplement Figure 2(c) - HRT Usage Trends.png"), width = 8, height = 4.5, bg = "white")


# Add figure data to output
data_temp_output <- supp_figure2c_data |>
  mutate(
    
    year = Year,
    
    variable = "% HRT Usage",
    
    country = "England",
    
    age_group = NA,
    
    sex = "Women",
    
    value = `% HRT`
    
  ) |>
  select(variable, country, sex, year, age_group, value)

data_rf_output <- rbind(data_rf_output, data_temp_output)


```

#### Figure 3
Figure 3 consists of two plots

- Plotting Obesity trends by UK nation

- Plotting Obesity trends in children in England
  
  
##### Obesity UK

**Data Sources:**\
England - Health Survey England\
Scotland - Scottish Health Survey\
Northern Ireland - Health Survey Nothern Ireland\
Wales - National Survey for Wales

```{r, fig.width=8, fig.height=9}

# Grab most data from BMI_Data.xlsx
obesity_data <- bind_rows(data_hub(country = "England", rf = "BMI")) |>
  rbind(bind_rows(data_hub(country = "Wales", rf = "BMI")))

# Grab Scotland and N. Ireland data from alternate excel file
# Scotland BMI data collected was on Overweight so need to adjust and add Obesity data from a seperate source
obese_data_sheets <- excel_sheets("BMI_Obese_Data.xlsx")

scotland_sheets <- obese_data_sheets[grepl(obese_data_sheets, pattern = "Scotland")]

# Loop over sheets for age and sex and add both to total dataset used for this specific variable.
for(sheet in scotland_sheets){
  
  # Read sheet and clean
  tempdata <- read_excel("BMI_Obese_Data.xlsx", sheet = sheet)
  group <- gsub(x = sheet, pattern = "Scotland_", replacement = "")
  tempdata <- pull_SHS_data(data = tempdata, group = group)
  tempdata$section <- "BMI"
  tempdata$variable <- ifelse(tempdata$variable == "Obesity", "% Obese", "% Non-Obese")
  
  # Merge into obese_data
  obesity_data <- rbind(obesity_data, tempdata)

}
 # Similar to Scotland data, needed to extract specific information on Obesity for N. Ireland as initial data collected was only Overweight %
nireland_sheets <- obese_data_sheets[grepl(obese_data_sheets, pattern = "NIreland")]

# Loop over sheets for sexes and add both to total dataset used for this specific variable.
for(sheet in nireland_sheets){
  
  # Read in sheet and clean
  tempdata <- read_excel(paste0("BMI_Obese_Data.xlsx"), sheet = sheet)
  group <- gsub(x = sheet, pattern = "NIreland_", replacement = "")
  tempdata <- pull_HSNI_data(data = tempdata, group = group)
  tempdata$variable <- "% Obese"
  tempdata$section <- "BMI"
  tempdata$value <- 100*tempdata$value
  tempdata$year = as.numeric(map_chr(strsplit(tempdata$year, "/"), 1))
  tempdata$age_group = if_else(tempdata$age_group == "Total", "16+", tempdata$age_group)
  
  # Merge into obese data
  obesity_data <- rbind(obesity_data, tempdata)
}


# Also need to add additional Wales years to data
tempdata <- whs_data |>
  filter(variable == "% Obese" & group %in% c("Men", "Women"))

# Clean obesity data
supp_figure3a_data <- obesity_data |>
  # Filter for needed variable from all sources
  filter(
    (country == "England" & variable == "% obese" & age_group %in% c("All men", "All women")) |
      (country == "Scotland" & variable == "% Obese" & age_group == "16+" & group %in% c("Male", "Female")) |
      (country == "Wales" & variable  == "BMI 30+ (obese)" & age_group == "All aged 16+" & group %in% c("Men", "Women")) |
      (country == "N. Ireland" & age_group == "16+" & group %in% c("Men", "Women"))
  ) |>
  # Clean year variable from Welsh data and make variable numeric
  mutate(year = suppressWarnings(as.numeric(substr(year, 1, 4)))) |>
  # Make value column numeric
  mutate(value = as.numeric(value)) |>
  # Clean group data
  mutate(group = case_when(
    group == "Male" ~ "Men",
    group == "Female" ~ "Women",
    TRUE ~ group)) |>
  # Merge in additional Wales data
  rbind(tempdata) 


# Plot Supplementary Figure 3(a)
ggplot(supp_figure3a_data, aes(x = year, y = value, colour = country)) +
  geom_line() +
  geom_point() +
  xlab("Year") +
  ylab("% Obese") +
  ggtitle("% Obese in Adults") +
  labs(colour =  "Country") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major.x = element_line(color = "grey92", size = 0.5),  # Adjust grid lines
        panel.grid.minor.x = element_blank()) +
  facet_wrap(~group,scales = "fixed", dir = "v") +
  scale_x_continuous(breaks = 2002:2022, limits = c(2002, 2022))


# Save plot
ggsave(filename = paste0(output_filepath, "Supplement Figure 3(a) - Obesity by Country and Sex.png"), width = 8, height = 9, bg = "white")



# Add figure data to output
data_temp_output <- supp_figure3a_data |>
  mutate(
    
    variable = "% Obese",
    
    age_group = "16+",
    
    sex = group
  
  ) |>
  select(variable, country, sex, year, age_group, value)

data_rf_output <- rbind(data_rf_output, data_temp_output)

```

##### Childhood Obesity England

**Data Sources:**\
England - Health Survey England

```{r, fig.width=8, fig.height=4.5}

# Filter to data needed for figure
supp_figure3b_data <- obesity_data |>
  # Filter for needed variable from all sources
  filter(country == "England" & group == "Children_All" & variable == "Obese" & age_group %in% c("2-10 years", "11-15 years")) |>
  # Clean year variable from Welsh data and make variable numeric
  mutate(year = suppressWarnings(as.numeric(substr(year, 1, 4)))) |>
  # Make value column numeric
  mutate(value = as.numeric(value)) |>
  # Remove 'years' from age groups
  mutate(age_group = gsub(age_group, pattern = " years", replacement = ""))

# Plot Supplementary Figure 3(b)
ggplot(data = supp_figure3b_data, aes(x = year, y = value, colour = factor(age_group, levels = c("2-10", "11-15")))) +
  geom_point() +
  geom_line() +
  xlab("Year") +
  ylab("% Obese") +
  ggtitle("% Obese in England") +
  labs(colour =  "Age Group", caption = "*Obese for those aged >15 as BMI > 30\nObese for those aged <= 15 as at or above the 95th BMI percentile in the UK") +
  scale_color_brewer(palette="Set2") +
  scale_x_continuous(breaks = 2002:2022, limits = c(2002, 2022)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major.x = element_line(color = "grey92", size = 0.5),  # Adjust grid lines
        panel.grid.minor.x = element_blank())

# Save plot
ggsave(filename = paste0(output_filepath, "Supplement Figure 3(b) - Childhood Obesity England.png"), width = 8, height = 4.5, bg = "white")

```


#### Figure 4
Supplement Figure 4 is a graph showing the trends in doctor-diagnosed diabetes in the UK.

**Data Sources:**\
England - Health Survey England\
Scotland - Scottish Health Survey

```{r, fig.width=8, fig.height=9}

# Read in diabetes data
diabetes_data <- integer(0)

sheets <- excel_sheets("Diabetes_Data.xlsx")

# Go through England sheets and apply HSE specific function to clean the data
england_sheets <- sheets[grepl(sheets, pattern = "England")]

for(sheet in england_sheets){

  nocol <- ncol(suppressMessages(read_excel("Diabetes_Data.xlsx", sheet = sheet)))
  tempdata <- suppressMessages(read_excel("Diabetes_Data.xlsx", sheet = sheet, col_types = c("text", rep("numeric", nocol-1))))
  group <- gsub(x = sheet, pattern = "England_", replacement = "")
  tempdata <- pull_HSE_diabetes_data(data = tempdata, group = group)
  tempdata$section <- "Diabetes"
  diabetes_data <- rbind(diabetes_data, tempdata)
        
}

# Go through Scotland sheets and apply SHS specific cleaning function
scotland_sheets <- sheets[grepl(sheets, pattern = "Scotland")]


for(sheet in scotland_sheets){
  tempdata <- suppressMessages(read_excel("Diabetes_Data.xlsx", sheet = sheet))
  group <- gsub(x = sheet, pattern = "Scotland_", replacement = "")
  tempdata <- pull_SHS_data(data = tempdata, group = group)
  tempdata$section <- "Diabetes"
  tempdata$variable = ifelse(tempdata$variable == "Yes", "% Diabetes", "% No Diabetes")
  diabetes_data <- rbind(diabetes_data, tempdata)
}


# Filter to data needed for figure
supp_figure4_data <- diabetes_data |>
  filter(
    (country == "England" & age_group %in% c("All men", "All women")) |
      (country == "Scotland" & age_group == "16+" & group %in% c("Male", "Female") & variable == "% Diabetes")
  ) |>
  # Change year to numeric
  mutate(year = as.numeric(year)) |>
  # Organise group variable
  mutate(group = case_when(
    group %in% c("Male") ~ "Men",
    group %in% c("Female") ~ "Women",
    TRUE ~ group))


# Plot Supplement Figure 4
ggplot(supp_figure4_data, aes(x = year, y = value, colour = country)) +
  geom_line() +
  geom_point() +
  xlab("Year") +
  ylab("% Diabetes") +
  ggtitle("% Doctor Diagnosed Diabetes in Adults") +
  labs(colour =  "Country", caption = "*Adult for England and Scotland defined as aged 16+") +
  scale_x_continuous(breaks = 2002:2022, limits = c(2002, 2022)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major.x = element_line(color = "grey92", size = 0.5),  # Adjust grid lines
        panel.grid.minor.x = element_blank()) +
  facet_wrap(~group, scales = "fixed", dir = "v")
  
# Save plot
ggsave(filename = paste0(output_filepath, "Supplement Figure 4 - Diabetes.png"), bg = "white", height = 9, width = 8)



# Add figure data to output
data_temp_output <- supp_figure4_data |>
  mutate(
    
    variable = "% Doctor Diagnosed Diabetes",
    
    age_group = "16+",
    
    sex = group
  
  ) |>
  select(variable, country, sex, year, age_group, value)

data_rf_output <- rbind(data_rf_output, data_temp_output)


```


#### Figure 5
Figure 5 displays trends in drinking above guidelines

**Data Sources:**\
England - Health Survey England\
Scotland - Scottish Health Survey\
Northern Ireland - Health Survey Nothern Ireland\
Wales - National Survey for Wales

```{r, fig.height=9, fig.width=8}

# Grabbing data

# First need to get England data and merge two variables from it
alcohol_data <- bind_rows(data_hub(country = "England", rf = "Alcohol")) |>
  pivot_wider(names_from = variable, values_from = value) |>
  mutate(value = 100 - (`% non drinker/did not drink in last 12 months` + `% up to 14 units per week (lower risk)`),
         variable = "% Over Guidelines") |>
  select(year, country, value, group, age_group, variable, section)

# Now add in Scotland and Wales data using conventional method
alcohol_data <- alcohol_data |>
  rbind(bind_rows(data_hub(country = "Scotland", rf = "Alcohol"))) |>
  rbind(bind_rows(data_hub(country = "Wales", rf = "Alcohol")))

# Read in Northern Ireland data manually
new_alcohol_sheets <- excel_sheets("Alcohol_Data_Alt.xlsx")
for(sheet in new_alcohol_sheets){
  tempdata <- read_excel(paste0("Alcohol_Data_Alt.xlsx"), sheet = sheet)
  group <- gsub(x = sheet, pattern = "NIreland_", replacement = "")
  tempdata <- pull_HSNI_data(data = tempdata, group = group)
  tempdata$variable <- "% Over Guidelines"
  tempdata$section <- "Alcohol"
  tempdata$value <- 100*tempdata$value
  
  alcohol_data <- rbind(alcohol_data, tempdata)
}

# Clean the data for what we need for the plot
supp_figure5_data <- alcohol_data |>
  filter(
    (country == "England" & age_group %in% c("All men", "All women")) |
      (country == "Scotland" & variable == "Hazardous/Harmful drinker" & group %in% c("Male", "Female")) |
      (country == "Wales" & variable == "Average weekly alcohol consumption - above 14 units (over guidelines)" & age_group == "All aged 16+" & group %in% c("Men", "Women")) |
      (country == "N. Ireland" & age_group == "Total" & group %in% c("Men", "Women"))
  ) |>
  # Cleaning year variable
  mutate(year = as.numeric(substr(year, 1, 4))) |>
  # Cleaning value variable
  mutate(value = as.numeric(value)) |>
  # Cleaning group variable
  mutate(group = case_when(
    group == "Female" ~ "Women",
    group == "Male" ~ "Men",
    TRUE ~ group))


# Plot Supplementary Figure 5
 ggplot(supp_figure5_data, aes(x = year, y = value, colour = country)) +
  geom_line() +
  geom_point() +
  xlab("Year") +
  ylab("% Drinking Over Guidelines") +
  ggtitle("% Drinking Over Guidelines in Adults") +
  labs(colour =  "Country",
       caption = "*Adult is defined as 16+ in England, Scotland and Wales and 18+ in N. Ireland") +
  scale_x_continuous(breaks = 2002:2022, limits = c(2002,2022)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major.x = element_line(color = "grey92", size = 0.5),  # Adjust grid lines
        panel.grid.minor.x = element_blank()) +
  facet_wrap(~group, scales = "fixed", dir = "v")

# Save plot
ggsave(filename = paste0(output_filepath, "Supplement Figure 5 - Alcohol.png"), bg = "white", height = 9, width = 8)



# Add figure data to output
data_temp_output <- supp_figure5_data |>
  mutate(
    
    variable = "% Over Weekly Alcohol Guidelines",
    
    age_group = if_else(country == "N. Ireland", "18+", "16+"),
    
    sex = group
  
  ) |>
  select(variable, country, sex, year, age_group, value)

data_rf_output <- rbind(data_rf_output, data_temp_output)



```


#### Figure 6
Figure 6 details trends in physical activity over guidelines

**Data Sources:**\
England - Health Survey England\
Scotland - Scottish Health Survey\
Northern Ireland - Health Survey Nothern Ireland\
Wales - National Survey for Wales

```{r, fig.height=9, fig.width=8}

# Grabbing data on activity
activity_data <- bind_rows(data_hub(country = "England", rf = "Activity")) |>
  rbind(bind_rows(data_hub(country = "Scotland", rf = "Activity"))) |>
  rbind(bind_rows(data_hub(country = "Wales", rf = "Activity"))) |>
  rbind(bind_rows(data_hub(country = "NIreland", rf = "Activity")))

# Grabbing extra data on activity from Wales
tempdata <- whs_data |>
  filter(section == "Activity" & group != "All") 


# Cleaning data on activity
supp_figure6_data <- activity_data |>
  filter(
    (country == "England" & variable  == "Meets aerobic guidelines" & age_group == "All adults 16+" & group  %in% c("Men", "Women")) |
      (country == "Scotland" & age_group == "16+" & group %in% c("Male", "Female") & variable == "Meets recommendations") |
      (country == "Wales" & variable == "Active at least 150 minutes in previous week" & age_group == "All aged 16+" & group %in% c("Men", "Women")) |
      (country == "N. Ireland" & age_group == "19+" & variable == "Meets recommendations" & group %in% c("Men", "Women"))
  ) |>
  # Merge in whs data
  rbind(tempdata) |>
  # Clean year data
  mutate(year = as.numeric(substr(year, 1, 4)),
         value = case_when(
           country == "N. Ireland" ~ as.numeric(value)*100,
           TRUE ~ as.numeric(value)),
         group = case_when(
           group == "Female" ~ "Women",
           group == "Male" ~ "Men",
           TRUE ~ group))


# Plot Supplement Figure 6
ggplot(supp_figure6_data, aes(x = year, y = value, colour = country)) +
  geom_line() +
  geom_point() +
  xlab("Year") +
  ylab("% Meets Activity Guidelines") +
  ggtitle("% Meets Activity Guidelines in Adults*") +
  labs(colour =  "Country", caption = "*Adult for England, Scotland and Wales defined as 16+, and for N. Ireland as 19+\nActivity guidelines are >150 mins Moderate Physical Activity") +
  scale_x_continuous(breaks = min(supp_figure6_data$year):max(supp_figure6_data$year)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major.x = element_line(color = "grey92", size = 0.5),  # Adjust grid lines
        panel.grid.minor.x = element_blank()) +
  facet_wrap(~group, scales = "fixed", dir = "v")

# Save plot
ggsave(filename = paste0(output_filepath, "Supplement Figure 6 - Activity.png"), bg = "white", height = 9, width = 8)


# Add figure data to output
data_temp_output <- supp_figure6_data |>
  mutate(
    
    variable = "% Meet Physical Activity Guidelines",
    
    age_group = if_else(country == "N. Ireland", "19+", "16+"),
    
    sex = group
  
  ) |>
  select(variable, country, sex, year, age_group, value)


data_rf_output <- rbind(data_rf_output, data_temp_output)


```

#### Figure 7
Supplementary Figure 7 contains 2 graphs

- Plotting smoking prevalance over time

- Plotting E Cigarette usage over time


##### Smoking

**Data Sources:**\
England - Health Survey England\
Scotland - Scottish Health Survey\
Northern Ireland - Health Survey Nothern Ireland\
Wales - National Survey for Wales

```{r, fig.height=9, fig.width=8}

# Grabbing data on smoking
smoking_data <- bind_rows(data_hub(country = "England", rf = "Smoking")) |>
  rbind(bind_rows(data_hub(country = "Scotland", rf = "Smoking"))) |>
  rbind(bind_rows(data_hub(country = "Wales", rf = "Smoking"))) |>
  rbind(bind_rows(data_hub(country = "NIreland", rf = "Smoking")))


# Grabbing whs data
tempdata <- whs_data |>
  filter(section == "Smoking" & group != "All")

# Clean data
supp_figure7a_data <- smoking_data |>
  filter(
    (country == "England" & variable  == "Current cigarette smoker" & age_group %in% c("All men", "All women") & group  %in% c("Men", "Women")) |
      (country == "Scotland" & age_group == "16+" & group %in% c("Male", "Female") & variable == "Current smoker") |
      (country == "Wales" & variable == "Smoker" & age_group == "All aged 16+" & group %in% c("Men", "Women")) |
      (country == "N. Ireland" & age_group == "Total" & group %in% c("Men", "Women"))
  ) |>
  rbind(tempdata) |>
  # Clean year data
  mutate(year = as.numeric(substr(year, 1, 4)),
         value = case_when(
           country == "N. Ireland" ~ as.numeric(value)*100,
           TRUE ~ as.numeric(value)),
         group = case_when(
           group == "Female" ~ "Women",
           group == "Male" ~ "Men",
           TRUE ~ group))



# Plot Supplement Figure 7a
ggplot(supp_figure7a_data, aes(x = year, y = value, colour = country)) +
  geom_line() +
  geom_point() +
  xlab("Year") +
  ylab("% Current Smoker") +
  ggtitle("% Current Smoker in Adults") +
  labs(colour =  "Country") +
  scale_x_continuous(breaks = 2002:2022, limits = c(2002,2022)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major.x = element_line(color = "grey92", size = 0.5),  # Adjust grid lines
        panel.grid.minor.x = element_blank()) +
  facet_wrap(~group, scales = "fixed", dir = "v")


# Save plot
ggsave(filename = paste0(output_filepath, "Supplement Figure 7a - Smoking.png"), width = 8, height = 9, bg = "white")



# Add figure data to output
data_temp_output <- supp_figure7a_data |>
  mutate(
    
    variable = "% Current Smoker",
    
    age_group = "16+",
    
    sex = group
  
  ) |>
  select(variable, country, sex, year, age_group, value)


data_rf_output <- rbind(data_rf_output, data_temp_output)
  

```


##### E-Cigarette Usage

**Data Sources:**\
England - Health Survey England\
Scotland - Scottish Health Survey\
Northern Ireland - Health Survey Nothern Ireland\
Wales - National Survey for Wales

```{r}

# Reading in GB wide data
ecig_data <- read_excel("E_Cigarette_Data.xlsx", sheet = "Great_Britain_All")

# Clean data
ecig_data <- ecig_data |>
  pivot_longer(cols = colnames(ecig_data)[3:ncol(ecig_data)]) |>
  pivot_wider(names_from = `Proportion of population aged 16 years and over by e-cigarette use [note 1]`, values_from = value) |>
  mutate(`% User` = `Daily user (%)` + `Occasional user (%)`) |>
  separate(col = name, sep = " \r\naged \r\n", into = c("group", "age_group")) |>
  mutate(Year = as.integer(Year), 
         age_group = case_when(
           grepl(age_group, pattern = " to ") ~ gsub(age_group, pattern = " to ", replacement = "-"),
           grepl(age_group, pattern = " and over") ~ gsub(age_group, pattern = " and over", replacement = "+"),
           TRUE ~ age_group
         ))


# Initialising colours for next plot
cols <- brewer.pal(n = 7, name = "Greys")[3:7]

# Plotting by age group
supp_figure7b_data <- ecig_data |>
  filter(!age_group %in% c("16+"), group == "All persons") 

# Plot Supplementary Figure 7b
ggplot(supp_figure7b_data, aes(x = Year, y = `Daily user (%)`, colour = age_group)) +
  geom_line() +
  geom_point() +
  ylab("% Current Regular E-Cigarette Users") +
  ggtitle("% Current Regular E-Cigarette Users in Great Britain") +
  labs(colour = "Age Group") +
  scale_color_manual(values = cols) +
  scale_x_continuous(breaks = min(supp_figure7b_data$Year):max(supp_figure7b_data$Year)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major.x = element_line(color = "grey92", size = 0.5),  # Adjust grid lines
        panel.grid.minor.x = element_blank())

# Save plot
ggsave(filename = paste0(output_filepath, "Supplement Figure 7b - E-Cigarette Usage.png"), bg = "white")


```

#### Figure 8
Figure 8 shows the trends in breast cancer screening uptake over time

**Data Sources:**\
England - Fingertips\
Scotland - Public Health Scotland\
Northern Ireland - HSCNI\
Wales - Public Health Wales

```{r}

# Read in England data
screening_data_breast_england <- read_excel("Screening_Data.xlsx", sheet = "England_Breast_Uptake")

# Manipulate to useful structure
screening_data_breast_england <- screening_data_breast_england |>
  mutate(year = as.numeric(substr(`Time period`, start = 1, stop = 4))) |>
  select(year, value = Value) |>
  mutate(country = "England")

# Read in Scotland data
screening_data_breast_scotland <- read_excel("Screening_Data.xlsx", sheet = "Scotland_Breast_Uptake")

# Making structure match England data
screening_data_breast_scotland <- screening_data_breast_scotland |>
  pivot_longer(cols = colnames(screening_data_breast_scotland)[2:ncol(screening_data_breast_scotland)]) |>
  filter(`Type of invitation1` == "All routine invitations1") |>
  mutate(year = as.numeric(substr(name, start = 1, stop = 4))) |>
  select(value, year) |>
  mutate(country = "Scotland")

# Read in Wales data
screening_data_breast_wales <- read_excel("Screening_Data.xlsx", sheet = "Wales_Breast_Uptake")

# Match structure with England data
screening_data_breast_wales <- screening_data_breast_wales |>
  select(year = Year, value = Uptake) |>
  mutate(country = "Wales")

# Read in N. Ireland data
screening_data_breast_nireland <- read_excel("Screening_Data.xlsx", sheet = "NIreland_Breast_Uptake")

# Match structure with England data
screening_data_breast_nireland <- screening_data_breast_nireland |>
  select(year = Year, value = Uptake) |>
  mutate(country = "N. Ireland")

# Plotting
supp_figure8_data <- screening_data_breast_england |>
  rbind(screening_data_breast_scotland) |>
  rbind(screening_data_breast_wales) |>
  rbind(screening_data_breast_nireland)

ggplot(supp_figure8_data, aes(x = year, y = value, colour = country)) +
  geom_line() +
  geom_point() +
  xlab("Year") +
  ylab("% Uptake") +
  labs(colour = "Country") +
  ggtitle("% Breast Screening Uptake") +
  scale_x_continuous(breaks = min(supp_figure8_data$year):max(supp_figure8_data$year)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major.x = element_line(color = "grey92", size = 0.5),  # Adjust grid lines
        panel.grid.minor.x = element_blank()) +
  ylim(60,80)

# Save plot
ggsave(filename = paste0(output_filepath, "Supplement Figure 8 - Breast Screening Uptake.png"), bg = "white")


```

#### Figure 9
Figure 9 shows the trends in bowel screening uptake over time

**Data Sources:**\
England - Fingertips\
Scotland - Public Health Scotland\
Northern Ireland - HSCNI\
Wales - Public Health Wales

```{r}

# Reading in data - England
screening_data_bowel_england <- read_excel("Screening_Data.xlsx", sheet = "England_Bowel_Uptake")

# Mutating to simple columns
screening_data_bowel_england <- screening_data_bowel_england |>
  mutate(year = as.numeric(substr(`Time period`, start = 1, stop = 4))) |>
  select(year, value = Value) |>
  mutate(country = "England")

# Reading in data - Scotland
screening_data_bowel_scotland <- read_excel("Screening_Data.xlsx", sheet = "Scotland_Bowel_Uptake")

# Matching columns of England data
screening_data_bowel_scotland <- screening_data_bowel_scotland |>
  pivot_longer(cols = colnames(screening_data_bowel_scotland)[2:ncol(screening_data_bowel_scotland)]) |>
  filter(...1 == "All persons") |>
  mutate(year = as.numeric(substr(name, start = 1, stop = 4))) |>
  select(year, value) |>
  mutate(country = "Scotland")

# Reading in data - Wales
screening_data_bowel_wales <- read_excel("Screening_Data.xlsx", sheet = "Wales_Bowel_Uptake")

# Matching columns of England data
screening_data_bowel_wales <- screening_data_bowel_wales |>
  select(year = Year, value = Uptake) |>
  mutate(country = "Wales")

# Reading in data - N. Ireland
screening_data_bowel_nireland <- read_excel("Screening_Data.xlsx", sheet = "NIreland_Bowel_Uptake")

# Matching columns of England data
screening_data_bowel_nireland <- screening_data_bowel_nireland |>
  select(year = Year, value = Uptake) |>
  mutate(country = "N. Ireland")

# Merging and plotting
supp_figure9_data <- screening_data_bowel_england |>
  rbind(screening_data_bowel_scotland)|>
  rbind(screening_data_bowel_wales) |>
  rbind(screening_data_bowel_nireland)

ggplot(supp_figure9_data, aes(x = year, y = value, colour = country)) +
  geom_line() +
  geom_point() +
  xlab("Year") +
  ylab("% Uptake") +
  labs(colour = "Country") +
  ggtitle("% Bowel Screening Uptake") +
  scale_x_continuous(breaks = min(supp_figure9_data$year):max(supp_figure9_data$year)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major.x = element_line(color = "grey92", size = 0.5),  # Adjust grid lines
        panel.grid.minor.x = element_blank())

# Save plot
ggsave(paste0(output_filepath, "Supplement Figure 9 - Bowel Screening Uptake.png"), bg = "white")

```


### Additional variable generation
This section is to generate data on variables that aren't being plotted here but may be useful.

#### % Overweight data (not Obese)
```{r}

# Grab most data from BMI_Data.xlsx
# Scotland and NIreland data needs to be manipulated to get % Overweight not obese
overweight_data <- bind_rows(data_hub(country = "England", rf = "BMI")) |>
  rbind(bind_rows(data_hub(country = "Wales", rf = "BMI")))  |>
  # rbind(bind_rows(data_hub(country = "NIreland", rf = "BMI"))) |>
  # rbind(bind_rows(data_hub(country = "Scotland", rf = "BMI")))
   filter((country == "England" & variable  == "% overweight" & age_group %in% c("All men", "All women") & group  %in% c("Men", "Women")) |
      (country == "Wales" & age_group == "All aged 16+" & group %in% c("Men", "Women") & variable == "BMI 25 - under 30 (overweight but not obese)")) |>
  # Clean year data from Wales
  mutate(year = as.numeric(substr(year, 1, 4)))


# WHS Data
overweight_whs <- whs_data |>
  pivot_wider(names_from = variable) |>
  mutate(
    
    `% Overweight not Obese` = `% Overweight` - `% Obese`
    
  ) |>
  filter(!is.na(`% Overweight not Obese`) & group != "All") |>
  select(any_of(colnames(whs_data)), value = `% Overweight not Obese`) |>
  mutate(variable =  "% Overweight not Obese")
  

# Scotland data
overweight_scotland <- bind_rows(data_hub(country = "Scotland", rf = "BMI"))

# Scotland BMI data collected was on Overweight so need to adjust and add Obesity data from a seperate source
obese_data_sheets <- excel_sheets("BMI_Obese_Data.xlsx")

scotland_sheets <- obese_data_sheets[grepl(obese_data_sheets, pattern = "Scotland")]

# Loop over sheets for age and sex and add both to total dataset used for this specific variable.
for(sheet in scotland_sheets){
  
  # Read sheet and clean
  tempdata <- read_excel("BMI_Obese_Data.xlsx", sheet = sheet)
  group <- gsub(x = sheet, pattern = "Scotland_", replacement = "")
  tempdata <- pull_SHS_data(data = tempdata, group = group)
  tempdata$section <- "BMI"
  tempdata$variable <- ifelse(tempdata$variable == "Obesity", "% Obese", "% Non-Obese")
  
  # Merge into obese_data
  overweight_scotland <- rbind(overweight_scotland, tempdata)

}

# Pivot and generate variable of interest
overweight_scotland <- overweight_scotland |>
  pivot_wider(names_from = variable) |>
  mutate(
    
    value = `Overweight (including obesity)` - `% Obese`,
    
    variable = "% Overweight not obese"
    
  ) |>
  filter(age_group == "16+", group != "All") |>
  select(colnames(overweight_data))


# NIreland data
overweight_nireland <- bind_rows(data_hub(country = "NIreland", rf = "BMI")) |>
  mutate(year = as.numeric(substr(year, 1, 4)),
         age_group = if_else(age_group == "Total", "16+", age_group),
         value = 100*value)

# Similar to Scotland data, needed to extract specific information on Obesity for N. Ireland as initial data collected was only Overweight %
nireland_sheets <- obese_data_sheets[grepl(obese_data_sheets, pattern = "NIreland")]

# Loop over sheets for sexes and add both to total dataset used for this specific variable.
for(sheet in nireland_sheets){
  
  # Read in sheet and clean
  tempdata <- read_excel(paste0("BMI_Obese_Data.xlsx"), sheet = sheet)
  group <- gsub(x = sheet, pattern = "NIreland_", replacement = "")
  tempdata <- pull_HSNI_data(data = tempdata, group = group)
  tempdata$variable <- "% Obese"
  tempdata$section <- "BMI"
  tempdata$value <- 100*tempdata$value
  tempdata$year = as.numeric(map_chr(strsplit(tempdata$year, "/"), 1))
  tempdata$age_group = if_else(tempdata$age_group == "Total", "16+", tempdata$age_group)
  
  # Merge into obese data
  overweight_nireland <- rbind(overweight_nireland, tempdata)
}


# Pivot and generate variable of interest
overweight_nireland <- overweight_nireland |>
  pivot_wider(names_from = variable) |>
  mutate(
    
    value = Overweight - `% Obese`,
    
    variable = "% Overweight not obese"
    
  ) |>
  filter(age_group == "16+", group != "All") |>
  select(colnames(overweight_data))


# Collect all data together
overweight_data <- overweight_data |>
  rbind(overweight_whs) |>
  rbind(overweight_nireland) |>
  rbind(overweight_scotland) |>
  mutate(
    
    age_group = "16+",
    
    variable = "% Overweight not obese",
    
    group = case_when(
           group == "Female" ~ "Women",
           group == "Male" ~ "Men",
           TRUE ~ group)
    
    ) |>
  select(-section, sex = group)
    

# Add data to output
data_rf_output <- rbind(data_rf_output, overweight_data)



```


#### Fibre Intake
```{r, fig.height=9, fig.width=8}

# Read in data years 1-4
data_1_4 <- read.delim(r"(C:\Users\rfrost\Documents\UK Data Service\UK Cancer Trends\NDNS 2008-2019\tab\ndns_rp_yr1-4a_personleveldietarydata_uk_v2.tab)")
data_weights <- read.delim(r"(C:\Users\rfrost\Documents\UK Data Service\UK Cancer Trends\NDNS 2008-2019\tab\ndns_rp_yr1-4a_indiv_uk.tab)") |>
  mutate(weight = wti_UKY1234) |>
  select(seriali, weight)
data_1_4 <- merge(data_1_4, data_weights, by = "seriali") |>
  select(surveyyear = SurveyYear, totalredmeat, aoac_fibre = AOACFibreg, sex = Sex, age = Age, weight, country = Country, processed.poultry = ProcessedPoultryg, processed.redmeat = ProcessedRedMeatg, burgers = Burgersg, sausages = Sausagesg)

# Read in data years 5-6
data_5_6 <- read.delim(r"(C:\Users\rfrost\Documents\UK Data Service\UK Cancer Trends\NDNS 2008-2019\tab\ndns_rp_yr5-6a_personleveldietarydata_v2.tab)")
data_weights <- read.delim(r"(C:\Users\rfrost\Documents\UK Data Service\UK Cancer Trends\NDNS 2008-2019\tab\ndns_rp_yr5-6a_indiv.tab)") |>
  mutate(weight = wti_Y56) |>
  select(seriali, weight)
data_5_6 <- merge(data_5_6, data_weights, by = "seriali") |>
  select(surveyyear = Surveyyear, totalredmeat, aoac_fibre = AOACFibreg, sex = Sex, age = Age, weight, country = Country, processed.poultry = ProcessedPoultryg, processed.redmeat = ProcessedRedMeatg, burgers = Burgersg, sausages = Sausagesg)

# Read in data years 7-8
data_7_8 <- read.delim(r"(C:\Users\rfrost\Documents\UK Data Service\UK Cancer Trends\NDNS 2008-2019\tab\ndns_rp_yr7-8a_personleveldietarydata.tab)")
data_weights <- read.delim(r"(C:\Users\rfrost\Documents\UK Data Service\UK Cancer Trends\NDNS 2008-2019\tab\ndns_rp_yr7-8a_indiv.tab)") |>
  mutate(weight = wti_Y78) |>
  select(seriali, weight)
data_7_8 <- merge(data_7_8, data_weights, by = "seriali") |>
  select(surveyyear = SurveyYear, totalredmeat, aoac_fibre = AOACFibreg, sex = Sex, age = Age, weight, country = Country, processed.poultry = ProcessedPoultryg, processed.redmeat = ProcessedRedMeatg, burgers = Burgersg, sausages = Sausagesg)

# Read in data years 9-11
data_9_11 <- read.delim(r"(C:\Users\rfrost\Documents\UK Data Service\UK Cancer Trends\NDNS 2008-2019\tab\ndns_rp_yr9-11a_personleveldietarydata_uk_20210831.tab)")
data_weights <- read.delim(r"(C:\Users\rfrost\Documents\UK Data Service\UK Cancer Trends\NDNS 2008-2019\tab\ndns_rp_yr9-11a_indiv_20211020.tab)") |>
  mutate(weight = wti_Y911) |>
  select(seriali, weight)
data_9_11 <- merge(data_9_11, data_weights, by = "seriali") |>
  select(surveyyear = SurveyYear, totalredmeat, aoac_fibre = AOACFibreg, sex = Sex, age = AgeR, weight, country = Country, processed.poultry = ProcessedPoultryg, processed.redmeat = ProcessedRedMeatg, burgers = Burgersg, sausages = Sausagesg)

# RBind all data together
data_ndhns <- rbind(data_1_4, data_5_6) |>
  rbind(data_7_8) |>
  rbind(data_9_11) |>
  # Filter to adults
  filter(age >= 19) |>
  mutate(country = if_else(country == "NI", "Northern Ireland", country)) |>
  # Create new weights
  group_by(sex, country) |>
  mutate(
    weight = case_when(
      between(surveyyear, 1, 4) ~ weight * sum(weight) * (1/sum(weight*between(surveyyear, 1, 4))) * (4/11),
      between(surveyyear, 5, 6) ~ weight * sum(weight) * (1/sum(weight*between(surveyyear, 5, 6))) * (2/11),
      between(surveyyear, 7, 8) ~ weight * sum(weight) * (1/sum(weight*between(surveyyear, 7, 8))) * (2/11),
      between(surveyyear, 9, 11) ~ weight * sum(weight) * (1/sum(weight*between(surveyyear, 9, 11))) * (3/11)),
    
    weight = weight/mean(weight),
    
    sex = if_else(sex == 1, "Men", "Women"),

    surveyyear_cat = case_when(
      surveyyear <= 2 ~ 2009,
      surveyyear <= 4 ~ 2011,
      surveyyear <= 6 ~ 2013,
      surveyyear <= 8 ~ 2015,
      surveyyear <= 11 ~ 2017.5,
      TRUE ~ NA)
   )

# Plot
data_ndhns |>
  group_by(surveyyear_cat, sex, country) |>
  mutate(fibre_rec = weight*(aoac_fibre  >= 30)) |>
  summarise(mean_weight = mean(weight), fibre_rec = 100*sum(fibre_rec)/sum(weight)) |>
  ggplot(aes(x= surveyyear_cat, y = fibre_rec, colour = country)) +
  geom_point() +
  geom_line() +
  xlab("Year") +
  ylab("% Meeting Fibre Intake Guidelines*") +
  ggtitle("% Meeting Fibre Intake Guidelines in UK") +
  labs(colour = "Country", caption = "*Guidelines are 30g of Fibre per day") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major.x = element_line(color = "grey92", size = 0.5),  # Adjust grid lines
        panel.grid.minor.x = element_blank()) +
  facet_wrap(~sex, scales = "fixed", dir = "v") +
  scale_x_continuous(limits = c(floor(min(data_ndhns$surveyyear_cat)), ceiling(max(data_ndhns$surveyyear_cat))),
                     breaks = floor(min(data_ndhns$surveyyear_cat)):ceiling(max(data_ndhns$surveyyear_cat)))

# Save plot
ggsave(filename = paste0(output_filepath, "Extra Supplement Figure 1a - Fibre.png"), width = 8, height = 9, bg = "white")

```

#### Processed Meat Consumption
```{r, fig.height=9, fig.width=8}


# Plot
data_ndhns |>
  group_by(surveyyear_cat, sex, country) |>
  summarise(total = n(), mean_weight = mean(weight), processed.meat = sum(weight*(processed.redmeat + processed.poultry + sausages + burgers))/sum(weight)) |>
  ggplot(aes(x= surveyyear_cat, y = processed.meat, colour = country)) +
  geom_point() +
  geom_line() +
  xlab("Year") +
  ylab("Processed Meat Consumption (g/day)") +
  ggtitle("% Processed Meat Consumption in the UK") +
  labs(colour = "Country") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major.x = element_line(color = "grey92", size = 0.5),  # Adjust grid lines
        panel.grid.minor.x = element_blank()) +
  facet_wrap(~sex, scales = "fixed", dir = "v")  +
  scale_x_continuous(limits = c(floor(min(data_ndhns$surveyyear_cat)), ceiling(max(data_ndhns$surveyyear_cat))),
                     breaks = floor(min(data_ndhns$surveyyear_cat)):ceiling(max(data_ndhns$surveyyear_cat)))

# Save plot
ggsave(filename = paste0(output_filepath, "Extra Supplement Figure 1b - Processed Meat.png"), width = 8, height = 9, bg = "white")


```


#### Cancer Mortality - Meeting Targets
```{r, results = "asis"}

mortality_jp <- read.delim(r"(C:\Users\rfrost\OneDrive - The Institute of Cancer Research\Documents\UK-cancer-trends\Data\Cancer Trends\Source Data\Cancer_Mortality_Data_Joinpoint.txt)", sep = "\t")

for(Country in unique(mortality_jp$Country)){
  
  mortality_jp_spec <- mortality_jp[mortality_jp$Country == Country,]
  
  plot <- meet_targets_table(target = 0.85, target.year = 2040, data_jp = mortality_jp_spec, target.start = 2024, title = paste0("JP Target Analysis: ", Country))
  print(plot)
  gtsave(plot, filename = paste0(output_filepath, "Extra Supplement Figure 2" , letters[which(unique(mortality_jp$Country) == Country)] , " - Recent Cancer Mortality Trends ", Country, ".png"))
  
}



```


### Output Figure data
Outputting data used for some of the figures in this document - this is so the data can be reused without having to be cleaned again separately.
Also outputting data for use in JoinPoint analysis of the risk factor trends
```{r}

if(output_data){

  write.csv(data_rf_output, r"(Z:\Generations\Projects\UK Cancer Trends\Data\Risk Factor Trends.csv)")
  
  # Filtering for variables needed in joinpoint analysis
  data_jp_output <- data_rf_output |>
    filter(variable %in% c("% Current Smoker", "% Doctor Diagnosed Diabetes", "% HRT Usage", "% Meet Physical Activity Guidelines", "% Obese", "% Over Weekly Alcohol Guidelines", "% Parity")) |>
    arrange(variable, country, sex, year) |>
    filter(between(year, 2000, 2019))
  
  write.csv(data_jp_output, r"(C:\Users\rfrost\OneDrive - The Institute of Cancer Research\Documents\UK-cancer-trends\Data\Risk_Factor_Data_Joinpoint.csv)")

}

```

### Useful Plots
Collected here are plots that were not listed in the original list of plots for the paper - but have been mentioned since and might be added.

#### Plot Joinpoint Output
```{r, fig.width=16, fig.height=9}

data_jp <- read.delim(r"(C:\Users\rfrost\OneDrive - The Institute of Cancer Research\Documents\UK-cancer-trends\Data\Risk_Factor_Data_Joinpoint_Output.txt)")


# Prepare data for plotting
useful_figure1_data <- data_jp |>
  filter(variable != "% Parity") |>
  mutate(

    # Create significant indicator
    significant = grepl(APC, pattern = "\\*"),

    # Remove * from APC and make numeric
    APC = as.numeric(gsub(APC, pattern = "\\*", replacement = ""))

  ) |>
  group_by(variable, country, sex) |>
  arrange(desc(year)) |>
  mutate(

    row_number = row_number(),

    first_na_row = min(row_number[is.na(APC)], max(row_number))

  ) |>
  filter(row_number <= first_na_row) |>
  summarise(

    year_range = paste0("(", min(year), ", ", max(year), ")"),

    APC = APC[1],

    significant = significant[1]

  )
  
# Plot data
ggplot(useful_figure1_data, aes(x = country, y = APC, fill = sex)) +
  # scale_fill_manual(values = c("#D01556FF", "#7CCA89FF")) +
  geom_bar(stat = "Identity", position = position_dodge(), colour = "black") +
  xlab("Country") +
  labs(fill = "Group") +
  coord_flip() +
  geom_hline(yintercept = 0) +
  geom_rect(aes(xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf),
            colour = "black", fill = NA, inherit.aes = FALSE) +
  facet_wrap( ~variable, shrink = T) +
  geom_text(aes(label = ifelse(significant, "*", ""),
              hjust = ifelse(APC>0, -0.1, 1.1)),
          position = position_dodge(width = 0.9),
          vjust = 0.8,
          size = 6) +
  theme(strip.text = element_text(face = "bold"))

ggsave(filename = paste0(output_filepath, "Useful Figure 1 - Recent Risk Factor Trends.png"), height = 9, width = 16, bg = "white")
  

```


#### Tabulation Joinpoint Output
```{r, results = "asis"}

gt_data <- useful_figure1_data |>
  ungroup() |>
  mutate(
    
    # Create variable to pass and create arrows in gt table
    arrow_indicator = case_when(
      significant & APC < 0 ~ -1,
      significant & APC > 0 ~ 1,
      TRUE ~ 0)
    
  )

# Filter other countries out of gt data and pivot
gt_data <- gt_data |>
  mutate(
    
    # Create arrow for plot
    arrow = case_when(
      arrow_indicator == -1 ~ "↓",
      arrow_indicator == 1 ~  "↑",
      arrow_indicator == 0 ~ "-"),
      
    country_sex = paste0(country, "-", sex)
      
  ) |>
  pivot_wider(names_from = country_sex, values_from = arrow, id_cols = variable) |>
  mutate_all(~ ifelse(is.na(.), "", .)) |>
  rename(Variable = `variable`)

# List of columns to style
columns_to_style <- setdiff(names(gt_data), 'Variable')

# Define the new column names
column_names <- names(gt_data)
new_names <- sub(".*-", "", column_names)

# Make into gt table
gt_data <- gt_data |>
  gt() |>
  # Align column results to center
  cols_align(
    align = "center",
    columns = columns_to_style
  ) |>
  # Make arrows etc bold
  tab_style(
    style = list(
      cell_text(weight = "bold")
    ),
    locations = cells_column_labels(columns_to_style)
  ) |>
  # Make column headers bold + center countries
  tab_style(
    style = list(
      cell_text(align = "center")
    ),
    locations = cells_column_labels(columns_to_style)
   ) |>
  tab_style(
    style = list(
      cell_text(weight = "bold")
    ),
    locations = cells_column_labels(everything())
   )
  
for(x in columns_to_style){

  col = sym(x)

  gt_data <- gt_data |>
    tab_style(
      style = list(
        cell_text(color = "#D83800FF", weight = "bold")
      ),
      locations = cells_body(
        columns = x,
        rows = !!col == "↓"
      )
    ) |>
    tab_style(
      style = list(
        cell_text(color = "#489838FF", weight = "bold")
      ),
      locations = cells_body(
        columns = x,
        rows = !!col == "↑"
      )
    ) |>
    tab_header("Recent Trends in Risk Factors")

}
  
# Add tab headers
for(country in c("England", "Scotland", "Wales", "N. Ireland")){
  gt_data <- tab_spanner(gt_data, label = country, columns = starts_with(country))
  gt_data <- tab_style(gt_data, 
    style = cell_text(weight = "bold"),
    locations = cells_column_spanners(spanners = country)
  )
}

# Remove Country from header names
# Create a named vector for cols_label()
rename_vector <- setNames(new_names, column_names)
gt_data <- gt_data |>
  cols_label(!!!rename_vector)


# Add footnote
gt_data <- gt_data |>
  tab_footnote("*Arrow indicates a significant trend (P < .05) in the most recent APC")


print(gt_data)

gtsave(gt_data, filename = paste0(output_filepath, "Useful Figure 2 - Recent Risk Factor Trends Table.png"))


```


#### Full Tabulation of Cancer Trend Joinpoints
```{r, fig.height = 9, fig.width = 30, results = "asis"}

# Loop through countries
for(country in unique(incidence_jp$Country)){
  
  cancer_data_spec <- filter(incidence_jp, Country == country)
  
  plot <- apc_full_table(cancer_data_spec, title = paste0("Cancer Incidence in ", country))
  
  print(plot)
  
  gtsave(plot, filename = paste0(output_filepath, "Useful Figure 3(", letters[which(unique(incidence_jp$Country) == country)] , ") - Risk Factor Trends Table ", country, ".html"))
  
  
}


```

