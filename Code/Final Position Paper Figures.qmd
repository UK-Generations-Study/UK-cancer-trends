---
title: "Final Position Paper Figures"
format: 
  html:
    toc: true
    toc-depth: 5
    grid:
      sidebar-width: 300px
      body-width: 2000px
      margin-width: 300px
      gutter-width: 1.5rem
execute:
  echo: false
  warning: false
  message: false
editor: 
  mode: source
---

Final plots for the 'position' paper. Organised by appearance.

## Set-up

### Packages
```{r}

library(ggplot2)
library(dplyr)
library(knitr)
library(readxl)
library(tidyr)
library(purrr)
library(stringr)
library(scales)
library(RColorBrewer)
library(gt)
library(patchwork)
library(cowplot)
library(grid)

```

### Filepaths
```{r, setup}

# Filepath to output plots
output_filepath <- r"(C:\Users\rfrost\OneDrive - The Institute of Cancer Research\Documents\UK-cancer-trends\Final Position Paper Figures\)"

# Filepath for data
data_filepath <- r"(C:\Users\rfrost\OneDrive - The Institute of Cancer Research\Documents\UK-cancer-trends\Data)"

# Output data 
output_data <- T

# Set working directory to data location
setwd(data_filepath)
knitr::opts_knit$set(root.dir = data_filepath)

```

### Visual Options
```{r}

# Setting theme for plots
theme_set(theme_minimal())

```

### Plotting Functions

#### Recent APC Table Function
```{r}

apc_table <- function(data_jp){
  
  # Initialise table
  apc_table <- data.frame(Cancer = character(0), period_women = character(0), apc_women = character(0), period_men = character(0), apc_men = character(0))

  # Loop through cancer locations and sexes, adding to the table sequentially

  for(cancer in unique(data_jp$Cancer_Site)){

    # Initialise row for output
    output_row <- cancer

    for(sex in c("Women", "Men")){

      # Filter data to data on sex and cancer of interest
      spec_data <- filter(data_jp, Sex == sex & Cancer_Site == cancer)

      # If no data - output NA's, else calculate period of most recent APC and APC
      if(nrow(spec_data)==0){
        output_row <- append(output_row, rep(NA, 2))
      } else {

        # Arrange by year and take the last APC segment
        spec_data <- arrange(spec_data, Year)

        join_years <- spec_data$Year[is.na(spec_data$APC)]

        # If joins, take the final segment, if not then leave the data alone
        if(length(join_years)>0){
          spec_data <- spec_data[spec_data$Year>=max(join_years),]
        }

        # Period
        period <- paste0(min(spec_data$Year), "-", max(spec_data$Year))

        # APC
        apc <- unique(spec_data$APC)[!is.na(unique(spec_data$APC))]

        if(length(apc)>1){
          stop("ERROR: final join not detected")
        }

        # Make APC pretty
        if(grepl(apc, pattern = "\\*")){
          numeric_apc <- gsub(apc, pattern = "\\*", replacement = "")
          numeric_apc <- round(as.numeric(numeric_apc), digits = 2)
          apc <- paste0(numeric_apc, "%*")
        } else {
          apc <- paste0(round(as.numeric(apc), digits = 2), "%")
        }


        # create output row
        output_row <- append(output_row, c(period, apc))

      }

    }

    apc_table[nrow(apc_table)+1,] <- output_row

  }
  
  # Manipulate table so it is ready for plotting
  apc_table <- data.frame(Cancer = rep(apc_table$Cancer, 2), sex = rep(c("women", "men"), each = length(unique(apc_table$Cancer))), apc = c(apc_table$apc_women, apc_table$apc_men), period = c(apc_table$period_women, apc_table$period_men))
  
  apc_table <- apc_table |> 
    # pivot_longer(cols = c(apc_women, apc_men)) |>
    mutate(
      
      # sex = gsub(name, pattern = "apc\\_", replacement = ""),
      
      sex = ifelse(sex == "men", "Men", "Women"),
      
      apc = gsub(apc, pattern = "\\%", replacement = ""),
      
      significant = grepl(apc, pattern = "\\*"),
      
      apc = as.numeric(gsub(apc, pattern = "\\*", replacement = "")),
      
      period = ifelse(is.na(period), NA, paste0("(", period, ")"))
      
    ) |>
    # Reorder Cancer label so plot is nicer
    arrange(desc(Cancer)) |>
    mutate(Cancer = factor(Cancer, levels = unique(Cancer)))
  
  # Grab max apc so we can scale plot with period annotations
  max_apc <- max(apc_table$apc, na.rm = T)

  return(apc_table)
  
}

```

#### Recent APC Barchart Function
```{r}

apc_barchart <- function(data_jp, title){
  
  # Initialise table
  apc_table <- data.frame(Cancer = character(0), period_women = character(0), apc_women = character(0), period_men = character(0), apc_men = character(0))

  # # Relabel sex variable to be easier to understand
  # data_jp <- data_jp |>
  #   mutate(Sex = if_else(Sex == 2, "Women", "Men"))

  # Loop through cancer locations and sexes, adding to the table sequentially

  for(cancer in unique(data_jp$Cancer_Site)){

    # Initialise row for output
    output_row <- cancer

    for(sex in c("Women", "Men")){

      # Filter data to data on sex and cancer of interest
      spec_data <- filter(data_jp, Sex == sex & Cancer_Site == cancer)

      # If no data - output NA's, else calculate period of most recent APC and APC
      if(nrow(spec_data)==0){
        output_row <- append(output_row, rep(NA, 2))
      } else {

        # Arrange by year and take the last APC segment
        spec_data <- arrange(spec_data, Year)

        join_years <- spec_data$Year[is.na(spec_data$APC)]

        # If joins, take the final segment, if not then leave the data alone
        if(length(join_years)>0){
          spec_data <- spec_data[spec_data$Year>=max(join_years),]
        }

        # Period
        period <- paste0(min(spec_data$Year), "-", max(spec_data$Year))

        # APC
        apc <- unique(spec_data$APC)[!is.na(unique(spec_data$APC))]

        if(length(apc)>1){
          stop("ERROR: final join not detected")
        }

        # Make APC pretty
        if(grepl(apc, pattern = "\\*")){
          numeric_apc <- gsub(apc, pattern = "\\*", replacement = "")
          numeric_apc <- round(as.numeric(numeric_apc), digits = 2)
          apc <- paste0(numeric_apc, "%*")
        } else {
          apc <- paste0(round(as.numeric(apc), digits = 2), "%")
        }


        # create output row
        output_row <- append(output_row, c(period, apc))

      }

    }

    apc_table[nrow(apc_table)+1,] <- output_row

  }
  
  # Manipulate table so it is ready for plotting
  apc_table <- data.frame(Cancer = rep(apc_table$Cancer, 2), sex = rep(c("women", "men"), each = length(unique(apc_table$Cancer))), apc = c(apc_table$apc_women, apc_table$apc_men), period = c(apc_table$period_women, apc_table$period_men))
  
  apc_table <- apc_table |> 
    # pivot_longer(cols = c(apc_women, apc_men)) |>
    mutate(
      
      # sex = gsub(name, pattern = "apc\\_", replacement = ""),
      
      sex = ifelse(sex == "men", "Men", "Women"),
      
      apc = gsub(apc, pattern = "\\%", replacement = ""),
      
      significant = grepl(apc, pattern = "\\*"),
      
      apc = as.numeric(gsub(apc, pattern = "\\*", replacement = "")),
      
      period = ifelse(is.na(period), NA, paste0("(", period, ")"))
      
    ) |>
    # Reorder Cancer label so plot is nicer
    arrange(desc(Cancer)) |>
    mutate(Cancer = factor(Cancer, levels = unique(Cancer)))
  
  # Grab max apc so we can scale plot with period annotations
  max_apc <- max(apc_table$apc, na.rm = T)

  return(apc_table)
  
  
  # Create plot
  plot <- apc_table |>
    ggplot(aes(x = Cancer, y = apc, fill = sex)) +
    geom_bar(stat = "identity", position = position_dodge(), colour = "black") +
    geom_hline(yintercept = 0) +
    ggtitle(title) +
    ylab("APC") +
    scale_fill_discrete(name = "Sex") +
    geom_text(aes(label = ifelse(significant, "*", ""),
                hjust = ifelse(apc>0, -0.1, 1.1)),
            position = position_dodge(width = 0.9),
            vjust = 0.8,
            size = 6) +
    geom_text(aes(label = period,
                    y = max_apc +1),
              position = position_dodge(width = 0.9),
              vjust = 0.38) +
    labs(caption = "* Indicates an APC significantly different from 0",
       y = "Annual Percentage Change (APC)") +
    ylim(NA, max_apc+2)  +
    coord_flip()
    
    
  

  return(plot)

}


```

#### Extracting JoinPoint data

```{r}

extract_joinpoint_splines <- function(data_jp){
  
  # browser()
  
  if(nrow(data_jp)==0){
    return(data.frame(Year = integer(0), Model = integer(0), section = integer(0), APC = integer(0)))
  }
  
  # Getting initial joins, as well as the APC (just before) the joins
  joins <- data_jp |>
    mutate(APC = case_when(!is.na(Flag) ~ lag(APC), TRUE ~ APC)) |>
    filter(grepl(Flag, pattern = "Joinpoint")) |>
    mutate(section = as.numeric(gsub(Flag, pattern = "Joinpoint ", replacement = "")))
  
  # Need a second set so we have full joins for both sides
  joins2 <- joins |>
    mutate(section = section + 1)
  
  # Getting start and end points and adding in joins from there
  start_end <- data_jp |>
    filter(row_number() %in% c(1, nrow(data_jp))) |>
    arrange(Year) |>
    mutate(section = case_when(
      row_number() == 1 ~ 1,
      row_number() == 2 ~ Joinpoints[1] + 1
    )) |>
    rbind(joins) |>
    rbind(joins2) |>
    mutate(APC = as.numeric(gsub(APC, pattern = "\\*", replacement = ""))) |>
    select(Year, Model, section, APC) |>
    arrange(Year, section)
  
  
  output_data <- data.frame()

  # Adding in points to get to exponential curves
  for(i in 1:(max(data_jp$Joinpoints)+1)){
    
    tempdata <- start_end[start_end$section == i,]

    new_data <- data.frame(Year = seq(tempdata$Year[1], tempdata$Year[2], by = 0.1))
    new_data$Model <- seq(log(tempdata$Model[1]), log(tempdata$Model[2]), by = (log(tempdata$Model[2]) - log(tempdata$Model[1]))/(nrow(new_data)-1))
    new_data$Model <- exp(new_data$Model)
    new_data$section <- i
    new_data$APC <- tempdata$APC[!is.na(tempdata$APC)][2]

    output_data <- rbind(output_data, new_data)

  }
  
  return(output_data)
  
}
```

#### Projecting JoinPoint Trends Forwards

```{r}

add_proj_data <- function(data, projection.yr){
  
  proj_data <- data.frame(group = character(0), Cancer_Site = character(0), Country = character(0), Year = numeric(0), ASR = numeric(0), incmort = character(0), proj_data = logical(0), last_join = logical(0))
  
  for(group in unique(data$group)){
    for(country in unique(data$Country)){
      
      # Filter to data for group and country
      spec_data <- data[data$group == group & data$Country == country,]
      
      # Arrange by year
      spec_data <- arrange(spec_data, Year)
      
      # Get last APC and Year
      last_year <- max(spec_data$Year)
      last_rate <- spec_data$ASR[nrow(spec_data)]
      last_apc <- spec_data$APC[nrow(spec_data)]
      last_apc <- 1 + as.numeric(gsub(last_apc, pattern = "\\*", replacement = ""))/100
      
      # Add data to proj data
      proj_data_new <- data.frame(group = group, Cancer_Site = spec_data$Cancer_Site[1], Country = country, Year = seq(last_year, projection.yr, by = 0.1))
      proj_data_new$lograte <- seq(from = log(last_rate), by = log((last_apc)^(1/10)), length.out = nrow(proj_data_new))
      proj_data_new$ASR <- exp(proj_data_new$lograte)
      proj_data_new$incmort <- "Mortality"
      proj_data_new$proj_data <- T
      proj_data_new$last_join <- T
      
      proj_data_new$lograte <- NULL
      
      proj_data <- rbind(proj_data, proj_data_new)
      
      
    }
  }
  
  
  # Return projections
  return(proj_data)
  
}

```

#### Plotting Joinpoint Incidence and Mortality

```{r}

plot_joinpoint_output <- function(data, projection.yr = NA){
  
  # Create new group variable that is needed for plotting multiple cancers and facet wrapping
  if(length(unique(data$Cancer_Site)) > 1){
    data$group <- paste0(data$Cancer_Site, " - ", data$Sex)
  } else {
    data$group <- data$Sex
  }
  
  # Add last join and projected data flags onto data
  data <- data |>
    mutate(proj_data = F) |>
    group_by(group, Country, incmort) |>
    arrange(desc(Year)) |>
    mutate(
      
      last_join = case_when(
        incmort == "Incidence" ~ F,
        APC == APC[row_number() == 1] ~ T,
        gsub(Flag, pattern = "Joinpoint ", replacement = "") == Joinpoints ~ T,
        TRUE ~ F
      )
      
    ) |>
    ungroup() |>
    arrange(Year)
  
  # Add projections
  proj_data <- add_proj_data(data |> filter(incmort == "Mortality"), projection.yr = projection.yr)
  data <- data |>
    select(group, Cancer_Site, Country, Year, ASR, incmort, proj_data, last_join) |>
    rbind(proj_data)
  
  # Need to add duplicate point for join between final join and non final join
  data_last_joins <- data |>
    filter(last_join == T) |>
    group_by(group, Country) |>
    filter(row_number() == 1) |>
    mutate(last_join = F)
  
  data <- rbind(data, data_last_joins)
  
  # Need to create dummy datapoints to get desired y limits between graphs in R
  data_mins <- data |>
    group_by(Cancer_Site, incmort) |>
    mutate(Year = min(Year), ASR = min(ASR)) |>
    ungroup() |>
    group_by(group, incmort) |>
    select(Year, ASR, group, incmort) |>
    distinct()
  
  data_maxes <- data |>
    group_by(Cancer_Site, incmort) |>
    mutate(Year = max(Year), ASR = max(ASR)) |>
    ungroup() |>
    group_by(group, incmort) |>
    select(Year, ASR, group, incmort) |>
    distinct()
  
  invisible_points <- rbind(data_mins, data_maxes)
  
  invisible_points_inc <- invisible_points |>
    filter(incmort == "Incidence")
  
  invisible_points_mort <- invisible_points |>
    filter(incmort == "Mortality")
  
  
  # Plot - Incidence
  data_inc <- data |>
    filter(incmort == "Incidence")
  
  plot_inc <- ggplot(data_inc, aes(x = Year, y = ASR)) +
    geom_line(aes(colour = Country, linetype = last_join)) +
    geom_point(data = subset(data_inc, proj_data == F), aes(colour = Country, shape = proj_data)) +
    geom_point(data = invisible_points_inc, aes(x = Year, y = ASR), alpha = 0) + 
    guides(linetype = "none", shape = "none") +
    theme(legend.position="none") +
    personal_theme() +
    theme(strip.text = element_blank()) + 
    facet_wrap( ~ group, scales = "free", ncol = 1)  +
    scale_x_continuous(breaks = seq(min(data_inc$Year), max(data_inc$Year), by = 2))
  
  # Plot - Mortality
  data_mort <- data |>
    filter(incmort == "Mortality")
  
  plot_mort <- ggplot(data_mort, aes(x = Year, y = ASR)) +
    geom_line(aes(colour = Country, linetype = last_join)) +
    geom_point(data = subset(data_mort, proj_data == F), aes(colour = Country, shape = proj_data)) +
    geom_point(data = invisible_points_mort, aes(x = Year, y = ASR), alpha = 0) + 
    guides(linetype = "none", shape = "none") +
    theme(strip.text.y = element_text(size = 11)) +
    personal_theme() +
    facet_wrap( ~ group, scales = "free", ncol = 1, strip.position = "right") +
    scale_x_continuous(breaks = seq(min(data_mort$Year), max(data_mort$Year), by = 2))
  
  # Combining Plots
  combined_plot <- wrap_plots(
    wrap_elements(textGrob("Incidence", gp = gpar(fontsize = 11, fontface = "bold"))) + wrap_elements(textGrob("Mortality", gp = gpar(fontsize = 11, fontface = "bold"))) + plot_layout(ncol = 2, widths = c(1,2.294118)),
    plot_inc + plot_mort + plot_layout(ncol = 2, widths = c(1,2.294118)),
    heights = c(0.03, length(unique(data$group))/2),  # Control height of labels and plots
    widths = c(1,2),
    ncol = 1
  ) + plot_layout(guides = "collect") & theme(legend.position = "bottom")
  
  return(combined_plot)
  
  
}

```

#### ggplot General Function
General function to apply to ggplot objects to get same theme etc. between plots
```{r}

personal_theme <- function(continuous.x = TRUE) {
  
  # Base theme components
  output <- list(
    geom_rect(aes(xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf),
              colour = "black", fill = NA, inherit.aes = FALSE),
    theme(strip.text = element_text(face = "bold"))
  )
  
  # Additional components if x-axis is continuous
  if (continuous.x) {
    output <- c(output, list(
      scale_x_continuous(breaks = 2002:2022, limits = c(2002, 2022)),
      theme(legend.position = "none",
            axis.text.x = element_text(angle = 45, hjust = 1),
            panel.grid.major.x = element_line(color = "grey92", size = 0.5),
            panel.grid.minor.x = element_blank())
    ))
  }
  
  return(output)
}


```

#### Meeting Mortality Target Table Generation
```{r}

meet_targets_table <- function(targets, target.year, target.start = NA, data_jp, title = NA){
  output.table <- data.frame(Cancer = character(0), Sex = character(0), APC_Req = character(0), Pace = character(0), Year_Ach = character(0))
  for(cancer in unique(data_jp$Cancer_Site)){
    for(sex in unique(data_jp$Sex)){
      
      # Filter data to sex and cancer of interest
      temp_data <- data_jp |>
        filter(Cancer_Site == cancer, Sex == sex)
      
      if(nrow(temp_data)>0){
        
        # Get final APC to extrapolate from
        finalAPC <- temp_data |>
          arrange(desc(Year)) |>
          filter(row_number()==1) |>
          pull(APC)
        
        finalAPC <- as.numeric(gsub(finalAPC, pattern = "\\*", replacement = ""))
        
        # Go from APC to percentage change mulitplier
        finalAPC_num <- 1+finalAPC/100
        
        finalyear <- temp_data |>
          arrange(desc(Year)) |>
          filter(row_number()==1) |>
          pull(Year)
        
        # If a target start year is given, then use that
        if(!is.na(target.start)){
          finalyear <- target.start
        }
        
        # Years left until target year
        yearsremaining <- target.year  - finalyear
        
        yearachieved <- ifelse(finalAPC_num<1, floor(log(targets)/log(finalAPC_num)) + finalyear, "Inf")
          
        goalAPC <- targets^(1/yearsremaining)
        
        goalAPC <- 100*(goalAPC-1)
        
        new_row <- c(cancer, sex, round(goalAPC, digits = 3),  round(finalAPC, digits = 3),  yearachieved)
      } else {
        
        new_row <- c(cancer, sex, "-", "-", "-")
        
      }
      
      output.table[nrow(output.table)+1,] <- new_row
      
    }
  }
  
  output.table <- output.table |>
    gt() |>
    # Header Creation
    tab_header(
      title = md(if_else(is.na(title), "**Globocan JoinPoint Target Analysis**", paste0("**", title, "**"))),
      subtitle = paste0("For a Goal of a 15% Reduction in Mortality by 2040", if_else(is.na(target.start), "", paste0(" from ", target.start)))
    ) |>
    
    # Head Rows
    tab_style(
      style = list(
        cell_text(weight = "bold", align = "center")
      ),
      locations = cells_column_labels(columns = everything())
    ) |>
    
    # Body rows
    tab_style(
      style = list(
        cell_text(align = "center")
      ),
      locations = cells_body(
          columns = everything()
      )
    ) |>
    # Colour final column based on if target is reached
    tab_style(
      style = list(
        cell_text(color = "#D83800FF", weight = "bold")
      ),
      locations = cells_body(
        columns = Year_Ach,
        rows = Year_Ach == "Inf" | suppressWarnings(as.numeric(Year_Ach)) > target.year
      )
    ) |>
    tab_style(
      style = list(
        cell_text(color = "#489838FF", weight = "bold")
      ),
      locations = cells_body(
        columns = Year_Ach,
        rows = suppressWarnings(as.numeric(Year_Ach)) <= target.year
      )
    ) |>
    
    # Rename columns
    cols_label(
      APC_Req = "APC Required",
      Pace = "Current APC",
      Year_Ach = "Year Achieved"
    ) 
    
  
  return(output.table)
}
```


## Read in data
```{r}

data <- read.csv("Cleaned Data/Risk_Factor_Data.csv")

```


## Plot Generation

### Main

#### Figure 1
Figure 1 is a plot showing the trend of incidence rates for all cancers combined (excl. NMSC) by country

**Data Sources:**\
England - NHS England\
Scotland - NHS Scotland\
Northern Ireland - QUB Northern Ireland Cancer Registry\
Wales - Public Health Wales

Need to add further annotation to this plot - explaining the dotted line is the most recent join and that the data is 3 year rolling averages
```{r, fig.width=10, fig.height=10}

# Read in data
incidence_jp <- read.delim(r"(Cleaned Data\Joinpoint Output\Cancer_Incidence_Data_Rolling_Joinpoint.txt)", sep = "\t") |>
  filter(Cancer_Site == "All sites excl. NMSC") |>
  rename(ASR = ASR_rolling) |>
  mutate(incmort = "Incidence")

mortality_jp <- read.delim(r"(Cleaned Data\Joinpoint Output\Cancer_Mortality_Data_Rolling_Joinpoint.txt)", sep = "\t") |>
  filter(Cancer_Site == "All sites excl. NMSC") |>
  rename(ASR = ASR_rolling) |>
  mutate(incmort = "Mortality")

total_jp <- rbind(incidence_jp, mortality_jp)

# Plot Figure 1
figure1 <- plot_joinpoint_output(data = total_jp, projection.yr = 2040) +
  plot_annotation(title = "Cancer Incidence and Mortality in the UK", theme = theme(plot.title = element_text(hjust = 0.5)))

figure1

# Save Figure 1
ggsave(figure1, filename = paste0(output_filepath, "Figure 1 - Cancer Incidence and Mortality by Country.png"), bg = "white", height = 10, width = 10)



```

#### Figure 2
Figure 2 consists of four plots showing recent trends in APC by cancer site combined.

**Data Sources:**\
England - NHS England\
Scotland - NHS Scotland\
Northern Ireland - QUB Northern Ireland Cancer Registry\
Wales - Public Health Wales

```{r, fig.height = 6, fig.width = 15}

# Read in mortality data
mortality_jp <- read.delim(r"(Cleaned Data\Joinpoint Output\Cancer_Mortality_Data_Rolling_Joinpoint.txt)", sep = "\t") |>
  rename(ASR = ASR_rolling)

# Find values of interest
mortality_goals <- mortality_jp |>
  group_by(Country, Sex, Cancer_Site) |>
  arrange(desc(Year)) |>
  reframe(
    last_year = max(Year),
    last_APC = as.numeric(gsub(APC[1], pattern = "\\*", replacement = ""))
    ) |>
  ungroup() |>
  # Calculate years until goal
  mutate(
    
    # Numeric APC value
    last_APC = 1 + last_APC/100,
    
    # Calculate years until goal is reached
    years_goal = if_else(last_APC >= 1, Inf, log(0.85)/log(last_APC)),
    
    # Years over goal
    years_goal_under =  (2040-2024) - years_goal,
    
    # Create tag for over 15 years
    over_15 = years_goal_under < -15,
    
    # Create tag for under/over/over15
    fill_tag = case_when(
      years_goal_under >= 0 ~ "Under",
      over_15 ~ "Over 15",
      TRUE ~ "Over"),
    
    # Get years goal for plotting purposes
    years_goal_under_plot = if_else(over_15, -15, years_goal_under),
    
    # Merge cancer site and sex for plotting
    Site_Sex = paste0(Cancer_Site, " - ", Sex)
    
  ) |>
  arrange(desc(Site_Sex))

# Get appropriately ordered levels for site and sex
mortality_goals$Site_Sex <- factor(mortality_goals$Site_Sex, levels = unique(mortality_goals$Site_Sex))


# Plot Figure
ggplot(mortality_goals, aes(x = Site_Sex, y = years_goal_under_plot, fill = fill_tag)) + 
  geom_bar(stat = "identity", colour = "black") +
  theme(strip.text = element_text(face = "bold")) +
  scale_fill_manual(breaks = c("Under", "Over", "Over 15"),
                    values = c("#66BB6AFF", "#E89800FF", "#EF5350FF")) +
  ylab("Years Under Goal") +
  xlab("") +
  labs(fill = "Target Trajectory") +
  geom_hline(yintercept = 0) +
  personal_theme(continuous.x = F) +
  facet_wrap(~ Country, nrow = 1) + 
  coord_flip()

ggsave(filename = paste0(output_filepath, "Figure 2 - Cancer Mortality Target Projections.png"), bg = "white", height = 6, width = 15)


```


##### Figure 2 (Test)
```{r, fig.height = 6, fig.width = 15}

mortality_goals <- mortality_goals |>
  mutate(
    
    last_APC_pretty = 100*(last_APC - 1),
    
    positive_APC = case_when(
      last_APC <= 0.85^(1/(2040-2024)) ~ "Reach Goal",
      last_APC < 1 ~ "Decreasing",
      TRUE ~ "Not Decreasing"
    )
    
  )


# Plot Figure
ggplot(mortality_goals, aes(x = Site_Sex, y = last_APC_pretty, fill = positive_APC)) + 
  geom_bar(stat = "identity", colour = "black") +
  scale_fill_manual(breaks = c("Reach Goal", "Decreasing", "Not Decreasing"),
                    values = c("#2E7D32FF", "#66BB6AFF", "#EF5350FF")) +
  ylab("APC") +
  xlab("") +
  labs(fill = "APC Trend") +
  scale_y_reverse() +
  ylim(c(8.5, -8.5)) +
  geom_hline(yintercept = 0) +
  geom_hline(yintercept = 100*(0.85^(1/(2040-2024))-1), linetype = "dashed") +
  personal_theme(continuous.x = F) + 
  facet_wrap(~ Country, nrow = 1) + 
  coord_flip()

ggsave(filename = paste0(output_filepath, "Figure 2 (Test) - Cancer Mortality Target Projections.png"), bg = "white", height = 6, width = 15)


```


#### Figure 3
Figure 3 consists of two plots showing recent trends in risk factors by UK country

##### Smoking/Alcohol/Obesity
```{r, fig.height = 9, fig.width = 24}

# Get data for each variable
figure3a_data_alcohol <- data |>
  filter(variable == "% Drinking Over Guidelines") |>
  filter(group != "All")

figure3a_data_smoking <- data |>
  filter(variable == "% Smoke") |>
  filter(group != "All")

figure3a_data_obesity <- data |>
  filter(variable == "% Obese") |>
  filter(group != "All")

# Generate seperate plots for each variable

# Alcohol
figure3a_alcohol <- ggplot(figure3a_data_alcohol, aes(x = year, y = value, colour = country)) +
  geom_line() +
  geom_point() +
  xlab("Year") +
  ylab("% Drinking Over Guidelines") +
  ggtitle("% Drinking Over Guidelines in Adults") +
  labs(colour =  "Country",
       caption = "*Adult is defined as 16+ in England, Scotland and Wales and 18+ in N. Ireland") +
  personal_theme() +
  facet_wrap(~group, scales = "fixed", dir = "v")

# Smoking
figure3a_smoking <- ggplot(figure3a_data_smoking, aes(x = year, y = value, colour = country)) +
  geom_line() +
  geom_point() +
  xlab("Year") +
  ylab("% Current Smoker") +
  ggtitle("% Current Smoker in Adults") +
  labs(colour =  "Country") +
  personal_theme() +
  facet_wrap(~group, scales = "fixed", dir = "v")

# Obesity
figure3a_obesity <- ggplot(figure3a_data_obesity, aes(x = year, y = value, colour = country)) +
  geom_line() +
  geom_point() +
  xlab("Year") +
  ylab("% Obese") +
  ggtitle("% Obese in Adults") +
  labs(colour =  "Country") +
  personal_theme() +
  facet_wrap(~group,scales = "fixed", dir = "v")

# Merge plots using patchwork
# Plot Figure 3
figure3a <- figure3a_alcohol + figure3a_smoking + figure3a_obesity +
  plot_layout(guides = "collect") & theme(legend.position = "right")

figure3a

# Save Plot
ggsave(figure3a, filename = paste0(output_filepath, "Figure 3a - Alcohol, Smoking, Obesity.png"), bg = "white", height = 9, width = 24)

```

##### Activity/Fibre/Processed Meat
```{r, fig.height = 9, fig.width=24}

# Grab data on activity
figure3b_data_activity <- data |>
  filter(variable == "% Meet Activity Guidelines") |>
  filter(group != "All")


# Grab data on fibre and processed meat
# Read in data years 1-4
data_1_4 <- read.delim(r"(C:\Users\rfrost\Documents\UK Data Service\UK Cancer Trends\NDNS 2008-2019\tab\ndns_rp_yr1-4a_personleveldietarydata_uk_v2.tab)")
data_weights <- read.delim(r"(C:\Users\rfrost\Documents\UK Data Service\UK Cancer Trends\NDNS 2008-2019\tab\ndns_rp_yr1-4a_indiv_uk.tab)") |>
  mutate(weight = wti_UKY1234) |>
  select(seriali, weight)
data_1_4 <- merge(data_1_4, data_weights, by = "seriali") |>
  select(surveyyear = SurveyYear, totalredmeat, aoac_fibre = AOACFibreg, sex = Sex, age = Age, weight, country = Country, processed.poultry = ProcessedPoultryg, processed.redmeat = ProcessedRedMeatg, burgers = Burgersg, sausages = Sausagesg)

# Read in data years 5-6
data_5_6 <- read.delim(r"(C:\Users\rfrost\Documents\UK Data Service\UK Cancer Trends\NDNS 2008-2019\tab\ndns_rp_yr5-6a_personleveldietarydata_v2.tab)")
data_weights <- read.delim(r"(C:\Users\rfrost\Documents\UK Data Service\UK Cancer Trends\NDNS 2008-2019\tab\ndns_rp_yr5-6a_indiv.tab)") |>
  mutate(weight = wti_Y56) |>
  select(seriali, weight)
data_5_6 <- merge(data_5_6, data_weights, by = "seriali") |>
  select(surveyyear = Surveyyear, totalredmeat, aoac_fibre = AOACFibreg, sex = Sex, age = Age, weight, country = Country, processed.poultry = ProcessedPoultryg, processed.redmeat = ProcessedRedMeatg, burgers = Burgersg, sausages = Sausagesg)

# Read in data years 7-8
data_7_8 <- read.delim(r"(C:\Users\rfrost\Documents\UK Data Service\UK Cancer Trends\NDNS 2008-2019\tab\ndns_rp_yr7-8a_personleveldietarydata.tab)")
data_weights <- read.delim(r"(C:\Users\rfrost\Documents\UK Data Service\UK Cancer Trends\NDNS 2008-2019\tab\ndns_rp_yr7-8a_indiv.tab)") |>
  mutate(weight = wti_Y78) |>
  select(seriali, weight)
data_7_8 <- merge(data_7_8, data_weights, by = "seriali") |>
  select(surveyyear = SurveyYear, totalredmeat, aoac_fibre = AOACFibreg, sex = Sex, age = Age, weight, country = Country, processed.poultry = ProcessedPoultryg, processed.redmeat = ProcessedRedMeatg, burgers = Burgersg, sausages = Sausagesg)

# Read in data years 9-11
data_9_11 <- read.delim(r"(C:\Users\rfrost\Documents\UK Data Service\UK Cancer Trends\NDNS 2008-2019\tab\ndns_rp_yr9-11a_personleveldietarydata_uk_20210831.tab)")
data_weights <- read.delim(r"(C:\Users\rfrost\Documents\UK Data Service\UK Cancer Trends\NDNS 2008-2019\tab\ndns_rp_yr9-11a_indiv_20211020.tab)") |>
  mutate(weight = wti_Y911) |>
  select(seriali, weight)
data_9_11 <- merge(data_9_11, data_weights, by = "seriali") |>
  select(surveyyear = SurveyYear, totalredmeat, aoac_fibre = AOACFibreg, sex = Sex, age = AgeR, weight, country = Country, processed.poultry = ProcessedPoultryg, processed.redmeat = ProcessedRedMeatg, burgers = Burgersg, sausages = Sausagesg)

# RBind all data together
data_ndhns <- rbind(data_1_4, data_5_6) |>
  rbind(data_7_8) |>
  rbind(data_9_11) |>
  # Filter to adults
  filter(age >= 19) |>
  mutate(country = if_else(country %in% c("NI", "Northern Ireland"), "N. Ireland", country)) |>
  # Create new weights
  group_by(sex, country) |>
  mutate(
    weight = case_when(
      between(surveyyear, 1, 4) ~ weight * sum(weight) * (1/sum(weight*between(surveyyear, 1, 4))) * (4/11),
      between(surveyyear, 5, 6) ~ weight * sum(weight) * (1/sum(weight*between(surveyyear, 5, 6))) * (2/11),
      between(surveyyear, 7, 8) ~ weight * sum(weight) * (1/sum(weight*between(surveyyear, 7, 8))) * (2/11),
      between(surveyyear, 9, 11) ~ weight * sum(weight) * (1/sum(weight*between(surveyyear, 9, 11))) * (3/11)),
    
    weight = weight/mean(weight),
    
    sex = if_else(sex == 1, "Men", "Women"),

    surveyyear_cat = case_when(
      surveyyear <= 2 ~ 2009,
      surveyyear <= 4 ~ 2011,
      surveyyear <= 6 ~ 2013,
      surveyyear <= 8 ~ 2015,
      surveyyear <= 11 ~ 2017.5,
      TRUE ~ NA)
   )

# Generate seperate plots for each variable

# Activity
figure3b_activity <- ggplot(figure3b_data_activity, aes(x = year, y = value, colour = country)) +
  geom_line() +
  geom_point() +
  xlab("Year") +
  ylab("% Meets Activity Guidelines") +
  ggtitle("% Meets Activity Guidelines in Adults*") +
  labs(colour =  "Country", caption = "*Adult for England, Scotland and Wales defined as 16+, and for N. Ireland as 19+\nActivity guidelines are >150 mins Moderate Physical Activity") +
  personal_theme() +
  facet_wrap(~group, scales = "fixed", dir = "v")

# Fibre
figure3b_fibre <- data_ndhns |>
  group_by(surveyyear_cat, sex, country) |>
  mutate(fibre_rec = weight*(aoac_fibre  >= 30)) |>
  summarise(mean_weight = mean(weight), fibre_rec = 100*sum(fibre_rec)/sum(weight)) |>
  ggplot(aes(x= surveyyear_cat, y = fibre_rec, colour = country)) +
  geom_line() +
  geom_point() +
  xlab("Year") +
  ylab("% Meeting Fibre Intake Guidelines") +
  ggtitle("% Meeting Fibre Intake Guidelines in UK**") +
  labs(colour = "Country", caption = "**Guidelines are 30g of Fibre per day") +
  personal_theme() +
  facet_wrap(~sex, scales = "fixed", dir = "v")


# Processed Meat
figure3b_pmeat <- data_ndhns |>
  group_by(surveyyear_cat, sex, country) |>
  summarise(total = n(), mean_weight = mean(weight), processed.meat = sum(weight*(processed.redmeat + processed.poultry + sausages + burgers))/sum(weight)) |>
  ggplot(aes(x= surveyyear_cat, y = processed.meat, colour = country)) +
  geom_line() +
  geom_point() +
  xlab("Year") +
  ylab("Processed Meat Consumption (g/day)") +
  ggtitle("% Processed Meat Consumption in the UK") +
  labs(colour = "Country") +
  personal_theme() +
  facet_wrap(~sex, scales = "fixed", dir = "v")

# Merge plots using patchwork
# Plot Figure 3b
figure3b <- figure3b_activity + figure3b_fibre + figure3b_pmeat +
  plot_layout(guides = "collect") & theme(legend.position = "right")

figure3b

# Save Plot
ggsave(figure3b, filename = paste0(output_filepath, "Figure 3b - Activity, Fibre, Processed Meat.png"), bg = "white", height = 9, width = 24)

```

#### Figure 4

Figure 4 has a plot comparing screening rates in different UK countries for both breast and bowel screening
```{r, fig.height= 4.5 , fig.width=16}

# Read in data for each variable
figure4_data_breast <- data |>
  filter(variable == "% Uptake Breast Screening")


figure4_data_bowel <- data |>
  filter(variable == "% Uptake Bowel Screening") |>
  filter(group == "All")

# Generate seperate plots for each variable

# Breast screening
figure4_breast <- ggplot(figure4_data_breast, aes(x = year, y = value, colour = country)) +
  geom_line() +
  geom_point() +
  xlab("Year") +
  ylab("% Uptake") +
  labs(colour = "Country") +
  ggtitle("% Breast Screening Uptake") +
  ylim(60,80) +
  personal_theme()

# Bowel screening
figure4_bowel <- ggplot(figure4_data_bowel, aes(x = year, y = value, colour = country)) +
  geom_line() +
  geom_point() +
  xlab("Year") +
  ylab("% Uptake") +
  labs(colour = "Country") +
  ggtitle("% Bowel Screening Uptake") +
  ylim(40,75) +
  personal_theme()

# Merge plots using patchwork
# Plot Figure 4
figure4 <- figure4_breast + figure4_bowel +
  plot_layout(guides = "collect") & theme(legend.position = "right")

figure4

# Save Plot
ggsave(figure4, filename = paste0(output_filepath, "Figure 4 - Bowel, Breast Screening Uptake.png"), bg = "white", height = 4.5, width = 16)

```

### Supplement

#### Figure 1
Supplement Figure 1 consists of plotting cancer incidence for all sites of interest

**Data Sources:**\
England - NHS England\
Scotland - NHS Scotland\
Northern Ireland - QUB Northern Ireland Cancer Registry\
Wales - Public Health Wales

```{r, fig.width=8, fig.height=16}

# Read in data
incidence_jp <- read.delim(r"(Cleaned Data\Joinpoint Output\Cancer_Incidence_Data_Rolling_Joinpoint.txt)", sep = "\t") |>
  filter(Cancer_Site != "All sites excl. NMSC") |>
  rename(ASR = ASR_rolling) |>
  mutate(incmort = "Incidence")

mortality_jp <- read.delim(r"(Cleaned Data\Joinpoint Output\Cancer_Mortality_Data_Rolling_Joinpoint.txt)", sep = "\t") |>
  filter(Cancer_Site != "All sites excl. NMSC") |>
  rename(ASR = ASR_rolling) |>
  mutate(incmort = "Mortality")

total_jp <- rbind(incidence_jp, mortality_jp)

# Plot Figure 1
supp_figure1 <- plot_joinpoint_output(data = total_jp, projection.yr = 2040) +
  plot_annotation(title = "Cancer Incidence and Mortality in the UK", theme = theme(plot.title = element_text(hjust = 0.5)))

supp_figure1

# Save Figure 1
ggsave(supp_figure1, filename = paste0(output_filepath, "Supplement Figure 1 - Cancer Incidence and Mortality by Country.png"),
       bg = "white", height = 50, width = 10, limitsize = F)


```

#### Figure 2
Figure 2 consists of plotting trends in smoking in the UK

**Data Sources:**\
England - Health Survey England\
Scotland - Scottish Health Survey\
Northern Ireland - Health Survey Nothern Ireland\
Wales - National Survey for Wales

```{r, fig.width=8, fig.height=9}

figure3a_smoking

# Save plot
ggsave(figure3a_smoking, filename = paste0(output_filepath, "Supplement Figure 2 - Smoking.png"), width = 8, height = 9, bg = "white")

```

#### Figure 3
Figure 3 consists of plotting obesity trends by UK nation

**Data Sources:**\
England - Health Survey England\
Scotland - Scottish Health Survey\
Northern Ireland - Health Survey Nothern Ireland\
Wales - National Survey for Wales

```{r, fig.width=8, fig.height=9}

figure3a_obesity

# Save plot
ggsave(figure3a_obesity, filename = paste0(output_filepath, "Supplement Figure 3 - Obesity.png"), width = 8, height = 9, bg = "white")

```


#### Figure 4
Supplement Figure 4 is a graph showing the trends in drinking above the guidelines in the UK

**Data Sources:**\
England - Health Survey England\
Scotland - Scottish Health Survey\
Northern Ireland - Health Survey Nothern Ireland\
Wales - National Survey for Wales

```{r, fig.height=9, fig.width=8}

figure3a_alcohol

# Save plot
ggsave(figure3a_alcohol, filename = paste0(output_filepath, "Supplement Figure 4 - Alcohol.png"), bg = "white", height = 9, width = 8)

```

#### Figure 5
Supplement Figure  is a graph showing the trends in fibre consumption in the UK

**Data Sources:**\
UK - NDNS (via UK Data Service)

```{r, fig.height=9, fig.width=8}

figure3b_fibre +
  ggtitle("% Meeting Fibre Intake Guidelines in UK*") +
  labs(caption = "*Guidelines are 30g of Fibre per day")

# Save plot
ggsave(filename = paste0(output_filepath, "Supplement Figure 5 - Fibre.png"), bg = "white", height = 9, width = 8)

```

#### Figure 6
Supplement Figure 6 is a graph showing the trends in processed meat consumption in the UK

**Data Sources:**\
UK - NDNS (via UK Data Service)

```{r, fig.height=9, fig.width=8}

figure3b_pmeat  

# Save plot
ggsave(figure3b_pmeat, filename = paste0(output_filepath, "Supplement Figure 6 - Processed Meat.png"), bg = "white", height = 9, width = 8)

```

#### Figure 7
Figure 7 details trends in physical activity over guidelines

**Data Sources:**\
England - Health Survey England\
Scotland - Scottish Health Survey\
Northern Ireland - Health Survey Nothern Ireland\
Wales - National Survey for Wales

```{r, fig.height=9, fig.width=8}

figure3b_activity

# Save plot
ggsave(figure3b_activity, filename = paste0(output_filepath, "Supplement Figure 7 - Activity.png"), bg = "white", height = 9, width = 8)

```


### Supplement Tables
```{r, results = "asis"}

mortality_jp <- read.delim(r"(Cleaned Data\Joinpoint Output\Cancer_Mortality_Data_Rolling_Joinpoint.txt)", sep = "\t") |>
  rename(ASR = ASR_rolling) |>
  mutate(incmort = "Mortality")

for(Country in unique(mortality_jp$Country)){
  
  mortality_jp_spec <- mortality_jp[mortality_jp$Country == Country,]
  
  plot <- meet_targets_table(target = 0.85, target.year = 2040, data_jp = mortality_jp_spec, target.start = 2024, title = paste0("JP Target Analysis: ", Country))
  print(plot)
  gtsave(plot, filename = paste0(output_filepath, "Supplement Table 3" , letters[which(unique(mortality_jp$Country) == Country)] , " - Recent Cancer Mortality Trends ", Country, ".png"))
  
}



```

