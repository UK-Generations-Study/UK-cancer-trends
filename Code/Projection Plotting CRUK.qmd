---
title: "Cancer Projections CRUK"
format: 
  html:
    toc: true
    toc-depth: 5
    grid:
      sidebar-width: 300px
      body-width: 2000px
      margin-width: 300px
      gutter-width: 1.5rem
editor: visual
---

## Packages

```{r}
library(dplyr)
library(readxl)
library(ggplot2)
library(gridExtra)
library(scales)
library(stringr)
library(tidyr)
```

## Setup

```{r, setup}
# knitr::opts_knit$set(root.dir = "C:/Users/rfrost/OneDrive - The Institute of Cancer Research/Documents/Position Paper/Data")
knitr::opts_knit$set(root.dir = "C:/Users/rfrost/OneDrive - The Institute of Cancer Research/Documents/UK-cancer-trends/Data/Cancer Trends")
knitr::opts_chunk$set(echo = FALSE)
theme_set(theme_minimal())
```

## Functions

```{r}

extract_joinpoint_splines_CRUK <- function(data_jp){
  
  # Getting initial joins, as well as the APC (just before) the joins
  joins <- data_jp |>
    mutate(APC = case_when(!is.na(Flag) ~ lag(APC), TRUE ~ APC)) |>
    filter(grepl(Flag, pattern = "Joinpoint")) |>
    mutate(section = as.numeric(gsub(Flag, pattern = "Joinpoint ", replacement = "")))
  
  # Need a second set so we have full joins for both sides
  joins2 <- joins |>
    mutate(section = section + 1)
  
  # Getting start and end points and adding in joins from there
  start_end <- data_jp |>
    filter(row_number() %in% c(1, nrow(data_jp))) |>
    arrange(Year) |>
    mutate(section = case_when(
      row_number() == 1 ~ 1,
      row_number() == 2 ~ Joinpoints[1] + 1
    )) |>
    rbind(joins) |>
    rbind(joins2) |>
    mutate(APC = as.numeric(gsub(APC, pattern = "\\*", replacement = ""))) |>
    select(Year, Model, section, APC) |>
    arrange(Year, section)
  
  
  output_data <- data.frame()

  # Adding in points to get to exponential curves
  for(i in 1:(max(data_jp$Joinpoints)+1)){
    
    tempdata <- start_end[start_end$section == i,]

    new_data <- data.frame(Year = seq(tempdata$Year[1], tempdata$Year[2], by = 0.1))
    new_data$Model <- seq(log(tempdata$Model[1]), log(tempdata$Model[2]), by = (log(tempdata$Model[2]) - log(tempdata$Model[1]))/(nrow(new_data)-1))
    new_data$Model <- exp(new_data$Model)
    new_data$section <- i
    new_data$APC <- tempdata$APC[!is.na(tempdata$APC)][2]

    output_data <- rbind(output_data, new_data)

  }
  
  return(output_data)
  
}

get_proj_data_CRUK <- function(data, data_jp, projection.yr){
  
 final <- data_jp |>
    arrange(desc(Year)) |>
    filter(row_number() == 1) |>
    mutate(APC = as.numeric(gsub(APC, pattern = "\\*", replacement = "")),
           APCnew = 1 + APC/100)
  
  proj_data <- data.frame(Year = seq(final$Year, projection.yr, by = 0.1))
  proj_data$lograte <- seq(from = log(final$Model), by = log((final$APCnew)^(1/10)), length.out = nrow(proj_data))
  proj_data$rate <- exp(proj_data$lograte)
  
  return(proj_data)
    
}


plot_joinpoint_output_CRUK <- function(cancer, sex = "All", data, data_jp, incmort, start.yr = NA, projection.yr = NA, projection.target = NA, report.APC = FALSE, cruk_proj = NA, moonshot.target = FALSE){
  
  # browser()
  
  data <- data |> 
    filter(Cancer.Type == cancer)
  
  # Filter both dataframes for the relevant data
  data <- data |>
    filter(Sex == sex) |>
    filter(Year >= max(c(start.yr, min(Year)), na.rm = T))
  
  data_jp <- data_jp |>
    filter(Cancer.Type == cancer, Sex == sex)
  
  # Call function to extract useful information from joinpoint data
  jp_plot <- extract_joinpoint_splines_CRUK(data_jp) |>
    filter(Year >= max(c(start.yr, min(Year)), na.rm = T))
  
  # Recoding sex label for plot
  # sex_lab <- ifelse(sex == 2, "Women", "Men")
  
  # Making variable for dynamic plot title generation
  projection <- !is.na(projection.yr)
  proj_lab <- ifelse(projection, "Projections", "Trends")
  
  # Initial plotting of trends
  plot <- ggplot() +
    geom_line(data = jp_plot, aes(x = Year, y = Model, colour = factor(APC, levels = unique(APC), labels = round(unique(APC), digits = 2)))) +
    geom_point(data = data, aes(x = Year, y = `ASR (Europe)`)) +
    scale_colour_discrete() +
    # guides(colour = "none") +
    # geom_point(data = jp_plot, aes(x = Year, y = Model, colour = section)) +
    ggtitle(paste0(incmort, " ", proj_lab, " for ", cancer, " Cancer in ", sex)) +
    # scale_x_continuous(breaks = pretty_breaks()) +
    ylab("ASR per 100,000")
      
  
  # If projection is desired, impute data to that point.
  if(projection){
    
    proj_data <- get_proj_data_CRUK(data, data_jp, projection.yr)
    
    # Plotting extrapolation
    plot <- plot +
      geom_line(data = proj_data, aes(x = Year, y = rate), colour = "red", linetype = "dashed")
  
    # If target is desired, plotting green box around the target
    if(!is.na(projection.target)){
      
      # Getting final ASR data point to project from
      final_ASR <- data |>
        arrange(desc(Year)) |>
        filter(row_number()==1) |>
        pull(`ASR (Europe)`)
      
        # geom_hline(yintercept = final_data$`ASR (Europe)`*projection.target, colour = "forestgreen")
      plot <- plot + 
        # annotate("rect", xmin = max(data$Year), xmax = Inf,ymin = -Inf, 
        #                       ymax = final_ASR*projection.target,
        #                       alpha = 0.2, fill = "lightgreen") +
        geom_hline(yintercept = final_ASR*projection.target, colour = "lightgreen") +
        labs(caption = paste0("Green line represents goal of a ", 100*(1-projection.target), "% reduction in mortality rate in the UK by ", projection.yr))
    }
    
    if(moonshot.target){
      final_ASR <- data |>
        arrange(desc(Year)) |>
        filter(row_number()==1) |>
        pull(`ASR (Europe)`)
    
      plot <- plot +
        geom_hline(yintercept = final_ASR*0.5, colour = "orange") +
        labs(caption = paste0(plot$labels$caption, "\n Orange line represents goal of a 50% decrease in mortality by 2042"))  
      
    }
  }
  
  if(length(cruk_proj)!=1){
    cruk_proj <- cruk_proj |>
      filter(Sex==sex, `Cancer Type` == cancer, Year <= projection.yr)

    
    plot <- plot +
      geom_line(data = cruk_proj, aes(x = Year, y = `ASR (Europe)`), colour = "blue", linetype = "dashed") # +
      # guides(override.aes = list(linetype = c("solid", "dashed", "dashed"),
      #                            colour = c("black", "red", "blue")),
      #        title = "Sources")
    
    # report.APC = FALSE
  }
    
  
  # If reported APC is desired, plot legend.
  if(report.APC){
    plot <- plot +
      labs(colour = "APC (%)")
  } else {
    plot <- plot +
      guides(colour = "none")
  }
  
  # Make more accurate x axis labels
  xmin <- min(c(start.yr, min(data$Year)), na.rm = T)
  xmax <- max(c(projection.yr, max(data$Year)), na.rm = T)
  
  breaks <- (xmin:xmax)[(xmin:xmax)%%5==0]
  
  plot <- plot +
    scale_x_continuous(breaks = breaks, labels = function(x) paste0(x-1, "-", x+1))
  
  return(plot)
  
}

```

## Alternative Plotting

```{r}

plot_joinpoint_output_CRUK_alt <- function(cancer, sex = "All People", data, data_jp, incmort, start.yr = NA, projection.yr = NA, projection.target = NA, cruk_proj = NA, moonshot.target = FALSE, report.APC = FALSE){
  
  # browser()
  
  data <- data |> 
    filter(Cancer.Type == cancer)
  
  # Filter both dataframes for the relevant data
  data <- data |>
    filter(Sex == sex) |>
    filter(Year >= max(c(start.yr, min(Year)), na.rm = T))
  
  data_jp <- data_jp |>
    filter(Cancer.Type == cancer, Sex == sex)
  
  # Call function to extract useful information from joinpoint data
  jp_plot <- extract_joinpoint_splines_CRUK(data_jp) |>
    filter(Year >= max(c(start.yr, min(Year)), na.rm = T)) |>
    mutate(Section = "JoinPoint")
  
  # Making variable for dynamic plot title generation
  projection <- !is.na(projection.yr)
  proj_lab <- ifelse(projection, "Projections", "Trends")
  
  # Initial plotting of trends
  plot <- ggplot() +
    geom_line(data = jp_plot, aes(x = Year, y = Model, colour = Section, linetype = Section)) +
    scale_colour_manual(name = "Section", 
                        values = c("JoinPoint" = "darkgrey", "JP Projection" = "red", "CRUK Projection" = "blue"),
                        breaks = c("JoinPoint", "JP Projection", "CRUK Projection")) +
    scale_linetype_manual(name = "Section", 
                          values = c("JoinPoint" = "solid", "JP Projection" = "dashed", "CRUK Projection" = "dashed"),
                          breaks = c("JoinPoint", "JP Projection", "CRUK Projection")) +
    geom_point(data = data, aes(x = Year, y = `ASR (Europe)`)) +
    ggtitle(paste0(incmort, " ", proj_lab, " for ", cancer, " Cancer in ", sex)) +
    ylab("ASR per 100,000")
      
  
  # If projection is desired, impute data to that point.
  if(projection){
    
    proj_data <- get_proj_data_CRUK(data, data_jp, projection.yr) |>
      mutate(Section = "JP Projection")
    
    # Plotting extrapolation
    plot <- plot +
      geom_line(data = proj_data, aes(x = Year, y = rate, colour = Section, linetype = Section))
  
    # If target is desired, plotting green box around the target
    if(!is.na(projection.target)){
      
      # Getting final ASR data point to project from
      final_ASR <- data |>
        arrange(desc(Year)) |>
        filter(row_number()==1) |>
        pull(`ASR (Europe)`)
      
      plot <- plot + 
        geom_hline(yintercept = final_ASR*projection.target, colour = "lightgreen") +
        labs(caption = paste0("Green line represents goal of a ", 100*(1-projection.target), "% reduction in mortality rate in the UK by ", projection.yr))
    }
    
    # Plotting moonshot target of 50% reduction in 25 years
    if(moonshot.target){
      final_ASR <- data |>
        arrange(desc(Year)) |>
        filter(row_number()==1) |>
        pull(`ASR (Europe)`)
    
      plot <- plot +
        geom_hline(yintercept = final_ASR*0.5, colour = "orange") +
        labs(caption = paste0(plot$labels$caption, "\n Orange line represents goal of a 50% decrease in mortality by 2042"))  
      
    }
  }
  
  # Plotting CRUK projections if given
  if(length(cruk_proj)!=1){
    cruk_proj <- cruk_proj |>
      filter(Sex==sex, `Cancer Type` == cancer, Year <= projection.yr) |>
      mutate(Section = "CRUK Projection")

    
    plot <- plot +
      geom_line(data = cruk_proj, aes(x = Year, y = `ASR (Europe)`, colour = Section, linetype = Section))
  }
  
  if(report.APC){
    
    # Adding dotted vertical lines
    xints <- data_jp |>
      filter(Year >= max(c(start.yr, min(Year)), na.rm = T)) |>
      filter(is.na(APC)) |>
      pull(Year)
    
    df_vlines <- data.frame(xintercept = xints)
    
    plot <- plot +
      geom_vline(data = df_vlines, aes(xintercept = xintercept), color = "black", linetype = "dotted")
    
    # Adding segment labels
    yint <- max(
      max(data$`ASR (Europe)`),
          ifelse(projection, max(proj_data$rate), -Inf),
          ifelse(length(cruk_proj)!=1, max(cruk_proj$`ASR (Europe)`), -Inf))
    
    # raising labels above the current plot
    yint <- yint*1.1
    
    xints_labs <- c(max(c(start.yr, min(data_jp$Year)), na.rm = T), xints, max(data$Year))
    
    xints_labs_moved <- xints_labs[1:(length(xints_labs)-1)] + diff(xints_labs)/2
    
    # Moving first and last if they are squished against the divide
    if(diff(xints_labs)[1]==1){
      xints_labs_moved[1] <- xints_labs_moved[1]-1
    }
    
    if(diff(xints_labs)[length(xints_labs)-1]==1){
      xints_labs_moved[length(xints_labs_moved)] <- xints_labs_moved[length(xints_labs_moved)] + 1
    }
    
    # Finding first JP segment in plot
    start_seg <- min(jp_plot$section)
    labels <- seq(start_seg, by = 1, length.out = length(xints_labs_moved))
    
    plot_labs <- data.frame(x = xints_labs_moved, y = yint, label = labels)
    
    plot <- plot +
      geom_text(data = plot_labs, aes(x = x, y = y, label = label))

  }
  
  # Make more accurate x axis labels
  xmin <- min(c(start.yr, min(data$Year)), na.rm = T)
  xmax <- max(c(projection.yr, max(data$Year)), na.rm = T)
  
  breaks <- (xmin:xmax)[(xmin:xmax)%%5==0]
  
  plot <- plot +
    scale_x_continuous(breaks = breaks, labels = function(x) paste0(x-1, "-", x+1)) +
    coord_cartesian(ylim = c(0, NA))
    
  
  return(plot)
  
}

# plot_joinpoint_output_CRUK_alt(cancer = "Breast", sex = "Women", data = data_mort, data_jp = mortality_jp, incmort = "Mortality", projection.yr = 2040, cruk_proj = proj_mort,
#                                projection.target = 0.85, moonshot.target = TRUE)
# plot_joinpoint_output_CRUK_alt(cancer = "Breast", sex = "Women", data = data_mort, data_jp = mortality_jp, incmort = "Mortality", projection.yr = 2040)
# plot_joinpoint_output_CRUK_alt(cancer = "Breast", sex = "Women", data = data_mort, data_jp = mortality_jp, incmort = "Mortality")

```

## Importing CRUK Projections

```{r}

cancers <- c("All Cancers Combined excluding Non-Melanoma Skin Cancer (C00-C97 (excl. C44))", "All Cancers Combined (C00-C97)", "Bowel Cancer (C18-C20)", "Breast Cancer (C50)", "Lung Cancer (C33-C34)", "Oesophageal Cancer (C15)",
             "Pancreatic Cancer (C25)", "Prostate Cancer (C61)")

proj_inc <- read_excel("CRUK/Cancer_Projection_Data_CRUK.xlsx", sheet = "Incidence")

proj_inc <- as.data.frame(proj_inc)

proj_inc <- proj_inc[,proj_inc[1,]!="Average New Cases Per Year\r\n(observed to 2016-2018; projected from 2019-2021)"]
proj_inc[1,4:6] <- c("All", "Women", "Men")
colnames(proj_inc) <- proj_inc[1,]
proj_inc <- proj_inc[-1,]

proj_inc <- proj_inc |>
  pivot_longer(cols = c("All", "Men", "Women")) |>
  rename(Sex = name, `ASR (Europe)` = value) |>
  mutate(Year = as.numeric(substr(Year, start = 1, stop = 4)) + 1,
         `ASR (Europe)` = as.numeric(`ASR (Europe)`)) |>
  filter(Year >= 2017, `Cancer Type` %in% cancers, !is.na(`ASR (Europe)`))


proj_mort <- read_excel("CRUK/Cancer_Projection_Data_CRUK.xlsx", sheet = "Mortality")

proj_mort <- as.data.frame(proj_mort)

proj_mort <- proj_mort[,proj_mort[1,]!="Average New Cases Per Year\r\n(observed to 2016-2018; projected from 2019-2021)"]
proj_mort[1,4:6] <- c("All", "Women", "Men")
colnames(proj_mort) <- proj_mort[1,]
proj_mort <- proj_mort[-1,]

proj_mort <- proj_mort |>
  pivot_longer(cols = c("All", "Men", "Women")) |>
  rename(Sex = name, `ASR (Europe)` = value) |>
  mutate(Year = as.numeric(substr(Year, start = 1, stop = 4)) + 1,
         `ASR (Europe)` = as.numeric(`ASR (Europe)`)) |>
  filter(Year >= 2018, `Cancer Type` %in% cancers, !is.na(`ASR (Europe)`))


```

## Cancer Incidence/Mortality

Red dashed line represents projection from continuing joinpoint segment, blue dashed line represents projection from CRUK.

```{r, fig.width=20, warning=FALSE}

data_inc <- read.csv("CRUK/Cancer_Incidence_Data_CRUK.txt") |>
  rename(`ASR (Europe)` = ASR..Europe.) |>
  mutate(Cancer.Type = str_replace(Cancer.Type, " .*", "")) |>
  mutate(Sex = ifelse(Sex == "All", "All People", Sex))

data_mort <- read.csv("CRUK/Cancer_Mortality_Data_CRUK.txt") |>
  rename(`ASR (Europe)` = ASR..Europe.) |>
  mutate(Cancer.Type = str_replace(Cancer.Type, " .*", "")) |>
  mutate(Sex = ifelse(Sex == "All", "All People", Sex))

incidence_jp <- read.delim("CRUK/Cancer_Incidence_Joinpoint_CRUK.txt", sep = "\t") |>
  mutate(Cancer.Type = str_replace(Cancer.Type, " .*", "")) |>
  mutate(Sex = ifelse(Sex == "All", "All People", Sex))

mortality_jp <- read.delim("CRUK/Cancer_Mortality_Joinpoint_CRUK.txt", sep = "\t") |>
  mutate(Cancer.Type = str_replace(Cancer.Type, " .*", "")) |>
  mutate(Sex = ifelse(Sex == "All", "All People", Sex))

proj_inc <- proj_inc |>
  mutate(`Cancer Type` = str_replace(`Cancer Type`, " .*", "")) |>
  mutate(Sex = ifelse(Sex == "All", "All People", Sex))

proj_mort <- proj_mort |>
  mutate(`Cancer Type` = str_replace(`Cancer Type`, " .*", "")) |>
  mutate(Sex = ifelse(Sex == "All", "All People", Sex))


cancers <- unique(data_inc$Cancer.Type)

for(cancer in cancers){
  if(cancer == "Breast"){
    p1 <- plot_joinpoint_output_CRUK(cancer = cancer, sex = "Women", data = data_inc, data_jp = incidence_jp, incmort = "Incidence", report.APC = TRUE)
    p2 <- plot_joinpoint_output_CRUK(cancer = cancer, sex = "Women", data = data_mort, data_jp = mortality_jp, incmort = "Mortality",
                                     projection.yr = 2040, projection.target = 0.85, cruk_proj = proj_mort, start.yr = 1993, report.APC = TRUE, moonshot.target = TRUE)
  } else if(cancer == "Prostate"){
    p1 <- plot_joinpoint_output_CRUK(cancer = cancer, sex = "Men", data = data_inc, data_jp = incidence_jp, incmort = "Incidence", report.APC = TRUE)
    p2 <- plot_joinpoint_output_CRUK(cancer = cancer, sex = "Men", data = data_mort, data_jp = mortality_jp, incmort = "Mortality",
                                     projection.yr = 2040, projection.target = 0.85, cruk_proj = proj_mort, start.yr = 1993, report.APC = TRUE, moonshot.target = TRUE)
  } else {
    p1 <- plot_joinpoint_output_CRUK(cancer = cancer, sex = "All People", data = data_inc, data_jp = incidence_jp, incmort = "Incidence", report.APC = TRUE)
    p2 <- plot_joinpoint_output_CRUK(cancer = cancer, sex = "All People", data = data_mort, data_jp = mortality_jp, incmort = "Mortality",
                                     projection.yr = 2040, projection.target = 0.85, cruk_proj = proj_mort, start.yr = 1993, report.APC = TRUE, moonshot.target = TRUE)
  }
  grid.arrange(p1, p2, nrow = 1, widths = c(4,4))
}
```

## Alternative Plots

```{r, fig.width=20, warning=FALSE}

for(cancer in cancers){
  if(cancer == "Breast"){
    p1 <- plot_joinpoint_output_CRUK_alt(cancer = cancer, sex = "Women", data = data_inc, data_jp = incidence_jp, incmort = "Incidence")
    p2 <- plot_joinpoint_output_CRUK_alt(cancer = cancer, sex = "Women", data = data_mort, data_jp = mortality_jp, incmort = "Mortality",
                                     projection.yr = 2040, projection.target = 0.85, cruk_proj = proj_mort, start.yr = 1993, moonshot.target = TRUE,
                                     report.APC = TRUE)
  } else if(cancer == "Prostate"){
    p1 <- plot_joinpoint_output_CRUK_alt(cancer = cancer, sex = "Men", data = data_inc, data_jp = incidence_jp, incmort = "Incidence")
    p2 <- plot_joinpoint_output_CRUK_alt(cancer = cancer, sex = "Men", data = data_mort, data_jp = mortality_jp, incmort = "Mortality",
                                     projection.yr = 2040, projection.target = 0.85, cruk_proj = proj_mort, start.yr = 1993, moonshot.target = TRUE,
                                     report.APC = TRUE)
  } else {
    p1 <- plot_joinpoint_output_CRUK_alt(cancer = cancer, data = data_inc, data_jp = incidence_jp, incmort = "Incidence")
    p2 <- plot_joinpoint_output_CRUK_alt(cancer = cancer, data = data_mort, data_jp = mortality_jp, incmort = "Mortality",
                                     projection.yr = 2040, projection.target = 0.85, cruk_proj = proj_mort, start.yr = 1993, moonshot.target = TRUE,
                                     report.APC = TRUE)
  }
  grid.arrange(p1, p2, nrow = 1, widths = c(4,4))
}

```

## Importing CRUK Projections Extra

```{r}

cancers <- c("Liver Cancer (C22)", "Bladder Cancer (C67)", "Brain, Other CNS and Intracranial Tumours (C70-C72, C75.1-C75.3, D32-D33, D35.2-D35.4, D42-D43, D44.3-D44.5)")

proj_inc <- read_excel("CRUK/Cancer_Projection_Data_CRUK.xlsx", sheet = "Incidence")

proj_inc <- as.data.frame(proj_inc)

proj_inc <- proj_inc[,proj_inc[1,]!="Average New Cases Per Year\r\n(observed to 2016-2018; projected from 2019-2021)"]
proj_inc[1,4:6] <- c("All", "Women", "Men")
colnames(proj_inc) <- proj_inc[1,]
proj_inc <- proj_inc[-1,]

proj_inc <- proj_inc |>
  pivot_longer(cols = c("All", "Men", "Women")) |>
  rename(Sex = name, `ASR (Europe)` = value) |>
  mutate(Year = as.numeric(substr(Year, start = 1, stop = 4)) + 1,
         `ASR (Europe)` = as.numeric(`ASR (Europe)`)) |>
  filter(Year >= 2017, `Cancer Type` %in% cancers, !is.na(`ASR (Europe)`))


proj_mort <- read_excel("CRUK/Cancer_Projection_Data_CRUK.xlsx", sheet = "Mortality")

proj_mort <- as.data.frame(proj_mort)

proj_mort <- proj_mort[,proj_mort[1,]!="Average New Cases Per Year\r\n(observed to 2016-2018; projected from 2019-2021)"]
proj_mort[1,4:6] <- c("All", "Women", "Men")
colnames(proj_mort) <- proj_mort[1,]
proj_mort <- proj_mort[-1,]

proj_mort <- proj_mort |>
  pivot_longer(cols = c("All", "Men", "Women")) |>
  rename(Sex = name, `ASR (Europe)` = value) |>
  mutate(Year = as.numeric(substr(Year, start = 1, stop = 4)) + 1,
         `ASR (Europe)` = as.numeric(`ASR (Europe)`)) |>
  filter(Year >= 2018, `Cancer Type` %in% cancers, !is.na(`ASR (Europe)`))



```

## Cancer Incidence/Mortality Extra

Red dashed line represents projection from continuing joinpoint segment, blue dashed line represents projection from CRUK.

```{r, fig.width=20, warning=FALSE}

data_inc <- read.csv("CRUK Extra/Cancer_Incidence_Data_CRUK_Extra.txt") |>
  rename(`ASR (Europe)` = ASR..Europe.) |>
  mutate(Cancer.Type = str_replace(Cancer.Type, " .*", "")) |>
  mutate(Sex = ifelse(Sex == "All", "All People", Sex))

data_mort <- read.csv("CRUK Extra/Cancer_Mortality_Data_CRUK_Extra.txt") |>
  rename(`ASR (Europe)` = ASR..Europe.) |>
  mutate(Cancer.Type = str_replace(Cancer.Type, " .*", "")) |>
  mutate(Sex = ifelse(Sex == "All", "All People", Sex))

incidence_jp <- read.delim("CRUK Extra/Cancer_Incidence_Joinpoint_CRUK_Extra.txt", sep = "\t") |>
  mutate(Cancer.Type = str_replace(Cancer.Type, " .*", "")) |>
  mutate(Sex = ifelse(Sex == "All", "All People", Sex))

mortality_jp <- read.delim("CRUK Extra/Cancer_Mortality_Joinpoint_CRUK_Extra.txt", sep = "\t") |>
  mutate(Cancer.Type = str_replace(Cancer.Type, " .*", "")) |>
  mutate(Sex = ifelse(Sex == "All", "All People", Sex))

proj_inc <- proj_inc |>
  mutate(`Cancer Type` = str_replace(`Cancer Type`, " .*", "")) |>
  mutate(`Cancer Type` = str_replace(`Cancer Type`, ",", "")) |>
  mutate(Sex = ifelse(Sex == "All", "All People", Sex))

proj_mort <- proj_mort |>
  mutate(`Cancer Type` = str_replace(`Cancer Type`, " .*", "")) |>
  mutate(`Cancer Type` = str_replace(`Cancer Type`, ",", "")) |>
  mutate(Sex = ifelse(Sex == "All", "All People", Sex))


cancers <- unique(data_inc$Cancer.Type)

for(cancer in cancers){
  p1 <- plot_joinpoint_output_CRUK(cancer = cancer, sex = "All People", data = data_inc, data_jp = incidence_jp, incmort = "Incidence", report.APC = TRUE)
  p2 <- plot_joinpoint_output_CRUK(cancer = cancer, sex = "All People", data = data_mort, data_jp = mortality_jp, incmort = "Mortality",
                                   projection.yr = 2039, projection.target = 0.85, cruk_proj = proj_mort, start.yr = 1993, report.APC = TRUE, moonshot.target = TRUE)
  grid.arrange(p1, p2, nrow = 1, widths = c(4,4))
}
```
