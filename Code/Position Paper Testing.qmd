---
title: "Position Paper Testing"
format: html
editor: 
  mode: source
---

This document is intended as a scrap working space to generate graphs and data for the Position Paper.

## Setup

### Packages
```{r}

library(ggplot2)
library(dplyr)
library(knitr)
library(readxl)
library(gt)
library(tidyr)
library(scales)

```

### Filepaths
```{r, setup}

# Filepath to output plots
output_filepath <- r"(C:\Users\rfrost\OneDrive - The Institute of Cancer Research\Documents\UK-cancer-trends\Temp Position Paper Figures\)"

# Filepath for data
data_filepath <- r"(C:\Users\rfrost\OneDrive - The Institute of Cancer Research\Documents\UK-cancer-trends\Data)"

# Set working directory to data location
setwd(data_filepath)
knitr::opts_knit$set(root.dir = data_filepath)

```

### Visual Options
```{r}

# Setting theme for plots
theme_set(theme_minimal())

```

### Functions

#### Extracting JP data

```{r}

extract_joinpoint_splines <- function(data_jp){
  
  # browser()
  
  if(nrow(data_jp)==0){
    return(data.frame(Year = integer(0), Model = integer(0), section = integer(0), APC = integer(0)))
  }
  
  # Getting initial joins, as well as the APC (just before) the joins
  joins <- data_jp |>
    mutate(APC = case_when(!is.na(Flag) ~ lag(APC), TRUE ~ APC)) |>
    filter(grepl(Flag, pattern = "Joinpoint")) |>
    mutate(section = as.numeric(gsub(Flag, pattern = "Joinpoint ", replacement = "")))
  
  # Need a second set so we have full joins for both sides
  joins2 <- joins |>
    mutate(section = section + 1)
  
  # Getting start and end points and adding in joins from there
  start_end <- data_jp |>
    filter(row_number() %in% c(1, nrow(data_jp))) |>
    arrange(Year) |>
    mutate(section = case_when(
      row_number() == 1 ~ 1,
      row_number() == 2 ~ Joinpoints[1] + 1
    )) |>
    rbind(joins) |>
    rbind(joins2) |>
    mutate(APC = as.numeric(gsub(APC, pattern = "\\*", replacement = ""))) |>
    select(Year, Model, section, APC) |>
    arrange(Year, section)
  
  
  output_data <- data.frame()

  # Adding in points to get to exponential curves
  for(i in 1:(max(data_jp$Joinpoints)+1)){
    
    tempdata <- start_end[start_end$section == i,]

    new_data <- data.frame(Year = seq(tempdata$Year[1], tempdata$Year[2], by = 0.1))
    new_data$Model <- seq(log(tempdata$Model[1]), log(tempdata$Model[2]), by = (log(tempdata$Model[2]) - log(tempdata$Model[1]))/(nrow(new_data)-1))
    new_data$Model <- exp(new_data$Model)
    new_data$section <- i
    new_data$APC <- tempdata$APC[!is.na(tempdata$APC)][2]

    output_data <- rbind(output_data, new_data)

  }
  
  return(output_data)
  
}
```

#### Projecting data forward

```{r}
get_proj_data <- function(data, data_jp, projection.yr){
  
  if(nrow(data_jp)==0){
    return(data.frame(Year = numeric(0), lograte = numeric(0), rate = numeric(0)))
  }
  
 final <- data_jp |>
    arrange(desc(Year)) |>
    filter(row_number() == 1) |>
    mutate(APC = as.numeric(gsub(APC, pattern = "\\*", replacement = "")),
           APCnew = 1 + APC/100)
  
  proj_data <- data.frame(Year = seq(final$Year, projection.yr, by = 0.1))
  proj_data$lograte <- seq(from = log(final$Model), by = log((final$APCnew)^(1/10)), length.out = nrow(proj_data))
  proj_data$rate <- exp(proj_data$lograte)
  
  return(proj_data)
    
}

add_proj_data <- function(data, projection.yr){
  
  proj_data <- data.frame(Sex = character(0), Country = character(0), Year = numeric(0), ASR = numeric(0), incmort = character(0), proj_data = logical(0), last_join = logical(0))
  
  for(sex in unique(data$Sex)){
    for(country in unique(data$Country)){
      
      # Filter to data for sex and country
      spec_data <- data[data$Sex == sex & data$Country == country,]
      
      # Arrange by year
      spec_data <- arrange(spec_data, Year)
      
      # Get last APC and Year
      last_year <- max(spec_data$Year)
      last_rate <- spec_data$ASR[nrow(spec_data)]
      last_apc <- spec_data$APC[nrow(spec_data)]
      last_apc <- 1 + as.numeric(gsub(last_apc, pattern = "\\*", replacement = ""))/100
      
      # Add data to proj data
      proj_data_new <- data.frame(Sex = sex, Country = country, Year = seq(last_year, projection.yr, by = 0.1))
      proj_data_new$lograte <- seq(from = log(last_rate), by = log((last_apc)^(1/10)), length.out = nrow(proj_data_new))
      proj_data_new$ASR <- exp(proj_data_new$lograte)
      proj_data_new$incmort <- "Mortality"
      proj_data_new$proj_data <- T
      proj_data_new$last_join <- T
      
      proj_data_new$lograte <- NULL
      
      proj_data <- rbind(proj_data, proj_data_new)
      
      
    }
  }
  
  
  # Return projections
  return(proj_data)
  
}

```

#### Plotting function

```{r}

plot_joinpoint_output <- function(data, projection.yr = NA, title = NA){
  
  # Add last join and projected data flags onto data
  data <- data |>
    mutate(proj_data = F) |>
    group_by(Sex, Country, incmort) |>
    arrange(desc(Year)) |>
    mutate(
      
      last_join = case_when(
        incmort == "Incidence" ~ F,
        APC == APC[row_number() == 1] ~ T,
        gsub(Flag, pattern = "Joinpoint ", replacement = "") == Joinpoints ~ T,
        TRUE ~ F
      )
      
    ) |>
    ungroup() |>
    arrange(Year)
  
  # Add projections
  proj_data <- add_proj_data(data |> filter(incmort == "Mortality"), projection.yr = projection.yr)
  data <- data |>
    select(Sex, Country, Year, ASR, incmort, proj_data, last_join) |>
    rbind(proj_data)
  
  # Need to add duplicate point for join between final join and non final join
  data_last_joins <- data |>
    filter(last_join == T) |>
    group_by(Sex, Country) |>
    filter(row_number() == 1) |>
    mutate(last_join = F)
  
  data <- rbind(data, data_last_joins)
  
  
  # Plot
  ggplot(data, aes(x = Year, y = ASR, colour = Country, linetype = last_join, shape = proj_data)) +
    geom_line() + 
    geom_point(data = subset(data, proj_data == F)) +
    guides(linetype = "none", shape = "none") + 
    theme(legend.position="bottom",
        legend.box = "vertical",
        axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major.x = element_line(color = "grey92", size = 0.5),  # Adjust grid lines
        panel.grid.minor.x = element_blank()) +
    facet_grid(Sex ~ incmort, scales = "free_x") +
    scale_x_continuous(breaks = seq(min(data$Year), max(data$Year), by = 3))
  
  
}

incidence_jp <- read.delim(r"(C:\Users\rfrost\OneDrive - The Institute of Cancer Research\Documents\UK-cancer-trends\Data\Cancer Trends\Source Data\Cancer_Incidence_Data_Joinpoint.txt)", sep = "\t") |>
  filter(Cancer_Site == "All sites excl. NSMC") |>
  mutate(incmort = "Incidence")

mortality_jp <- read.delim(r"(C:\Users\rfrost\OneDrive - The Institute of Cancer Research\Documents\UK-cancer-trends\Data\Cancer Trends\Source Data\Cancer_Mortality_Data_Rolling_Avg_Joinpoint.txt)", sep = "\t") |>
  filter(Cancer_Site == "All sites excl. NMSC") |>
  rename(ASR = ASR_rolling) |>
  mutate(incmort = "Mortality")

total_jp <- rbind(incidence_jp, mortality_jp)

plot_joinpoint_output(data = total_jp, projection.yr = 2040)


```

#### Full Joinpoint Table Function
```{r}

apc_full_table <- function(data_jp, title = NA){
  
  
  # Initialise output table
  output_table <- data.frame(Site = character(0), Sex = character(0), JP_N = numeric(0), JP_years = character(0), APC = numeric(0), Significant = character(0))
  
  for(cancer in unique(data_jp$Cancer_Site)){

    for(sex in c("Women", "Men")){
      
      # Initialise row for output
      output_row <- c(cancer, sex)

      # Filter data to data on sex and cancer of interest
      spec_data <- filter(data_jp, Sex == sex & Cancer_Site == cancer)

      # If no data - output NA's, else calculate period of most recent APC and APC
      if(nrow(spec_data)==0){
        output_row <- append(output_row, c(1, rep(NA, 3)))
        
        output_table <- rbind(output_table, output_row)
        
      } else {

        # Arrange by year
        spec_data <- arrange(spec_data, Year)
        
        # Find join years
        join_years <- spec_data$Year[is.na(spec_data$APC)]
        join_years <- c(min(spec_data$Year), join_years, max(spec_data$Year))

        # Total number of joins
        no_segments <- spec_data$Joinpoints[1] + 1
        
        for(i in 1:no_segments){
          
          # Filter data to join
          spec_data_join <- spec_data[spec_data$Year > join_years[i] & spec_data$Year < join_years[i+1],]
          
          # Add join no. to output
          output_row_join <- append(output_row, i)
          
          # Add years of the join to output
          output_row_join <- append(output_row_join, paste0("(", join_years[i], ", ", join_years[i+1], ")"))
          
          # Add APC of the join to output
          output_row_join <- append(output_row_join, gsub(spec_data_join$APC[1], pattern = "\\*", replacement = ""))
          
          # Add significant indicator to output
          output_row_join <- append(output_row_join, if_else(grepl(spec_data_join$APC[1], pattern = "\\*"), "YES", "NO"))
          
          # Append row onto dataframe
          output_table <- rbind(output_table, output_row_join)
          
        }

      }

    }
    
  }
  
  # Readd in column names - rbind removes them
  colnames(output_table) <- c("Site", "Sex", "Segment Number", "Years", "APC", "Significant")
  
  # Max number of segments
  max_segments <- max(output_table$`Segment Number`)
  
  # Pivot wider
  output_table <- output_table |>
    pivot_wider(id_cols = c(Site, Sex), names_from = `Segment Number`, values_from = c(Years, APC, Significant), names_vary = "slowest") |>
    mutate_all(~ replace_na(., "-"))

  
  # gt and make 'pretty'
  output_table_gt <- output_table |>
    gt()
  
  # For each segment, make a tab spanner
  for(i in 1:max_segments){
    output_table_gt <- tab_spanner(output_table_gt, label = paste0("Segment ", i), columns = ends_with(paste0("_", i)))
    output_table_gt <- cols_width(output_table_gt, as.formula(paste0("Years_", i, "~ px(140)")))
  }

  # Define the new column names
  column_names <- names(output_table)
  new_names <- sub("_\\d+$", "", column_names)

  # Create a named vector for cols_label()
  rename_vector <- setNames(new_names, column_names)

  # Rename columns using cols_label
  output_table_gt <- output_table_gt |>
      cols_label(!!!rename_vector)
  
  output_table_gt <- output_table_gt |>
    tab_header(
      title = md(paste0("**",ifelse(is.na(title), "", title),"**"))
    ) |>
    # Column headers
    tab_style(
    style = list(
      cell_text(weight = "bold", align = "center")
    ),
    locations = cells_column_labels(everything())
    ) |>
    # Body rows
    tab_style(
      style = list(
        cell_text(align = "center")
      ),
      locations = cells_body(
          columns = c(paste0(c("Years_", "APC_", "Significant_"), rep(1:max_segments, each = 3)))
      )
    ) |>
    # Line between sex column and rest of table
    tab_style(
      style = cell_borders(
        sides = c("right"),
        weight = px(0.5),
        color = "lightgrey"),
      locations = cells_body(
        columns = Sex)) |>
    cols_width(Sex ~ px(120))
  
  # Add colours to significant column to show if significant or not
  for(i in 1:max_segments){
    
    column <- sym(paste0("Significant_", i))
    
    output_table_gt <- output_table_gt |>
      tab_style(
        style = list(
          cell_fill(color = "#ef5350")
          ),
        locations = cells_body(
          columns = column,
          rows = !!column == "NO"
        )
      ) |>
      tab_style(
        style = list(
          cell_fill(color = "#C8E870FF")
          ),
        locations = cells_body(
          columns = column,
          rows = !!column == "YES"
        )
      )
  }
    
  
  return(output_table_gt)
  
   
}


```

#### Meeting Mortality Target Table Generation
```{r}


meet_targets_table <- function(targets, target.year, target.start = NA, data_jp, title = NA){

  output.table <- data.frame(Cancer = character(0), Sex = character(0), APC_Req = character(0), Pace = character(0), Full_Change = character(0), Year_Ach = character(0))

  for(cancer in unique(data_jp$Cancer_Site)){
    for(sex in unique(data_jp$Sex)){
      
      # Filter data to sex and cancer of interest
      temp_data <- data_jp |>
        filter(Cancer_Site == cancer, Sex == sex)
      
      if(nrow(temp_data)>0){
        
        # Get final APC to extrapolate from
        finalAPC <- temp_data |>
          arrange(desc(Year)) |>
          filter(row_number()==1) |>
          pull(APC)
        
        finalAPC <- as.numeric(gsub(finalAPC, pattern = "\\*", replacement = ""))
        
        # Go from APC to percentage change mulitplier
        finalAPC_num <- 1+finalAPC/100
        
        finalyear <- temp_data |>
          arrange(desc(Year)) |>
          filter(row_number()==1) |>
          pull(Year)
        
        # If a target start year is given, then use that
        if(!is.na(target.start)){
          finalyear <- target.start
        }
        
        # Years left until target year
        yearsremaining <- target.year  - finalyear
        
        total_change_num <- finalAPC_num^(yearsremaining)
        
        total_change <- 100*(total_change_num-1)
        
        yearachieved <- ifelse(finalAPC_num<1, floor(log(targets)/log(finalAPC_num)) + finalyear, "Inf")
          
        goalAPC <- targets^(1/yearsremaining)
        
        goalAPC <- 100*(goalAPC-1)
        
        new_row <- c(cancer, sex, round(goalAPC, digits = 3),  round(finalAPC, digits = 3),  round(total_change, digits = 3), yearachieved)

      } else {
        
        new_row <- c(cancer, sex, "-", "-", "-", "-")
        
      }
      
      output.table[nrow(output.table)+1,] <- new_row
      
    }
  }
  
  output.table <- output.table |>
    gt() |>
    # Header Creation
    tab_header(
      title = md(if_else(is.na(title), "**Globocan JoinPoint Target Analysis**", paste0("**", title, "**"))),
      subtitle = paste0("For a Goal of a 15% Reduction in Mortality by 2040", if_else(is.na(target.start), "", paste0(" from ", target.start)))
    ) |>
    
    # Head Rows
    tab_style(
      style = list(
        cell_text(weight = "bold", align = "center")
      ),
      locations = cells_column_labels(columns = everything())
    ) |>
    
    # Body rows
    tab_style(
      style = list(
        cell_text(align = "center")
      ),
      locations = cells_body(
          columns = everything()
      )
    ) |>
    # Colour final column based on if target is reached
    tab_style(
      style = list(
        cell_text(color = "#D83800FF", weight = "bold")
      ),
      locations = cells_body(
        columns = Year_Ach,
        rows = Year_Ach == "Inf" | suppressWarnings(as.numeric(Year_Ach)) > target.year
      )
    ) |>
    tab_style(
      style = list(
        cell_text(color = "#489838FF", weight = "bold")
      ),
      locations = cells_body(
        columns = Year_Ach,
        rows = suppressWarnings(as.numeric(Year_Ach)) <= target.year
      )
    ) |>
    
    # Rename columns
    cols_label(
      APC_Req = "APC Required",
      Pace = "Current APC",
      Full_Change = "Total Change",
      Year_Ach = "Year Achieved"
    ) 
    
  
  return(output.table)

}


```

## Plots

### Risk Factors

#### Recent Trends
```{r, fig.width=16, fig.height=9}

data_jp <- read.delim(r"(C:\Users\rfrost\OneDrive - The Institute of Cancer Research\Documents\UK-cancer-trends\Data\Risk_Factor_Data_Joinpoint_Output.txt)")


# Prepare data for plotting
useful_figure1_data <- data_jp |>
  filter(variable != "% Parity") |>
  mutate(

    # Create significant indicator
    significant = grepl(APC, pattern = "\\*"),

    # Remove * from APC and make numeric
    APC = as.numeric(gsub(APC, pattern = "\\*", replacement = ""))

  ) |>
  group_by(variable, country, sex) |>
  arrange(desc(year)) |>
  mutate(

    row_number = row_number(),

    first_na_row = min(row_number[is.na(APC)], max(row_number))

  ) |>
  filter(row_number <= first_na_row) |>
  summarise(

    year_range = paste0("(", min(year), ", ", max(year), ")"),

    APC = APC[1],

    significant = significant[1]

  )
  
# Plot data
ggplot(useful_figure1_data, aes(x = country, y = APC, fill = sex)) +
  # scale_fill_manual(values = c("#D01556FF", "#7CCA89FF")) +
  geom_bar(stat = "Identity", position = position_dodge(), colour = "black") +
  xlab("Country") +
  labs(fill = "Group") +
  coord_flip() +
  geom_hline(yintercept = 0) +
  geom_rect(aes(xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf),
            colour = "black", fill = NA, inherit.aes = FALSE) +
  facet_wrap( ~variable, shrink = T) +
  geom_text(aes(label = ifelse(significant, "*", ""),
              hjust = ifelse(APC>0, -0.1, 1.1)),
          position = position_dodge(width = 0.9),
          vjust = 0.8,
          size = 6) +
  theme(strip.text = element_text(face = "bold"))

ggsave(filename = paste0(output_filepath, "Risk Factor Figure 1 - Recent Trends.png"), height = 9, width = 16, bg = "white")
  

```

#### Recent Trends Table
```{r, results = "asis"}

gt_data <- useful_figure1_data |>
  ungroup() |>
  mutate(
    
    # Create variable to pass and create arrows in gt table
    arrow_indicator = case_when(
      significant & APC < 0 ~ -1,
      significant & APC > 0 ~ 1,
      TRUE ~ 0)
    
  )

# Filter other countries out of gt data and pivot
gt_data <- gt_data |>
  mutate(
    
    # Create arrow for plot
    arrow = case_when(
      arrow_indicator == -1 ~ "↓",
      arrow_indicator == 1 ~  "↑",
      arrow_indicator == 0 ~ "-"),
      
    country_sex = paste0(country, "-", sex)
      
  ) |>
  pivot_wider(names_from = country_sex, values_from = arrow, id_cols = variable) |>
  mutate_all(~ ifelse(is.na(.), "", .)) |>
  rename(Variable = `variable`)

# List of columns to style
columns_to_style <- setdiff(names(gt_data), 'Variable')

# Define the new column names
column_names <- names(gt_data)
new_names <- sub(".*-", "", column_names)

# Make into gt table
gt_data <- gt_data |>
  gt() |>
  # Align column results to center
  cols_align(
    align = "center",
    columns = columns_to_style
  ) |>
  # Make arrows etc bold
  tab_style(
    style = list(
      cell_text(weight = "bold")
    ),
    locations = cells_column_labels(columns_to_style)
  ) |>
  # Make column headers bold + center countries
  tab_style(
    style = list(
      cell_text(align = "center")
    ),
    locations = cells_column_labels(columns_to_style)
   ) |>
  tab_style(
    style = list(
      cell_text(weight = "bold")
    ),
    locations = cells_column_labels(everything())
   )
  
for(x in columns_to_style){

  col = sym(x)

  gt_data <- gt_data |>
    tab_style(
      style = list(
        cell_text(color = "#D83800FF", weight = "bold")
      ),
      locations = cells_body(
        columns = x,
        rows = !!col == "↓"
      )
    ) |>
    tab_style(
      style = list(
        cell_text(color = "#489838FF", weight = "bold")
      ),
      locations = cells_body(
        columns = x,
        rows = !!col == "↑"
      )
    ) |>
    tab_header("Recent Trends in Risk Factors")

}
  
# Add tab headers
for(country in c("England", "Scotland", "Wales", "N. Ireland")){
  gt_data <- tab_spanner(gt_data, label = country, columns = starts_with(country))
  gt_data <- tab_style(gt_data, 
    style = cell_text(weight = "bold"),
    locations = cells_column_spanners(spanners = country)
  )
}

# Remove Country from header names
# Create a named vector for cols_label()
rename_vector <- setNames(new_names, column_names)
gt_data <- gt_data |>
  cols_label(!!!rename_vector)


# Add footnote
gt_data <- gt_data |>
  tab_footnote("*Arrow indicates a significant trend (P < .05) in the most recent APC")


print(gt_data)

gtsave(gt_data, filename = paste0(output_filepath, "Risk Factor Figure 2 - Recent Trends Table.png"))


```

#### Fibre intake
```{r, fig.height=9, fig.width=8}

# Read in data years 1-4
data_1_4 <- read.delim(r"(C:\Users\rfrost\Documents\UK Data Service\UK Cancer Trends\NDNS 2008-2019\tab\ndns_rp_yr1-4a_personleveldietarydata_uk_v2.tab)")
data_weights <- read.delim(r"(C:\Users\rfrost\Documents\UK Data Service\UK Cancer Trends\NDNS 2008-2019\tab\ndns_rp_yr1-4a_indiv_uk.tab)") |>
  mutate(weight = wti_UKY1234) |>
  select(seriali, weight)
data_1_4 <- merge(data_1_4, data_weights, by = "seriali") |>
  select(surveyyear = SurveyYear, totalredmeat, aoac_fibre = AOACFibreg, sex = Sex, age = Age, weight, country = Country, processed.poultry = ProcessedPoultryg, processed.redmeat = ProcessedRedMeatg, burgers = Burgersg, sausages = Sausagesg)

# Read in data years 5-6
data_5_6 <- read.delim(r"(C:\Users\rfrost\Documents\UK Data Service\UK Cancer Trends\NDNS 2008-2019\tab\ndns_rp_yr5-6a_personleveldietarydata_v2.tab)")
data_weights <- read.delim(r"(C:\Users\rfrost\Documents\UK Data Service\UK Cancer Trends\NDNS 2008-2019\tab\ndns_rp_yr5-6a_indiv.tab)") |>
  mutate(weight = wti_Y56) |>
  select(seriali, weight)
data_5_6 <- merge(data_5_6, data_weights, by = "seriali") |>
  select(surveyyear = Surveyyear, totalredmeat, aoac_fibre = AOACFibreg, sex = Sex, age = Age, weight, country = Country, processed.poultry = ProcessedPoultryg, processed.redmeat = ProcessedRedMeatg, burgers = Burgersg, sausages = Sausagesg)

# Read in data years 7-8
data_7_8 <- read.delim(r"(C:\Users\rfrost\Documents\UK Data Service\UK Cancer Trends\NDNS 2008-2019\tab\ndns_rp_yr7-8a_personleveldietarydata.tab)")
data_weights <- read.delim(r"(C:\Users\rfrost\Documents\UK Data Service\UK Cancer Trends\NDNS 2008-2019\tab\ndns_rp_yr7-8a_indiv.tab)") |>
  mutate(weight = wti_Y78) |>
  select(seriali, weight)
data_7_8 <- merge(data_7_8, data_weights, by = "seriali") |>
  select(surveyyear = SurveyYear, totalredmeat, aoac_fibre = AOACFibreg, sex = Sex, age = Age, weight, country = Country, processed.poultry = ProcessedPoultryg, processed.redmeat = ProcessedRedMeatg, burgers = Burgersg, sausages = Sausagesg)

# Read in data years 9-11
data_9_11 <- read.delim(r"(C:\Users\rfrost\Documents\UK Data Service\UK Cancer Trends\NDNS 2008-2019\tab\ndns_rp_yr9-11a_personleveldietarydata_uk_20210831.tab)")
data_weights <- read.delim(r"(C:\Users\rfrost\Documents\UK Data Service\UK Cancer Trends\NDNS 2008-2019\tab\ndns_rp_yr9-11a_indiv_20211020.tab)") |>
  mutate(weight = wti_Y911) |>
  select(seriali, weight)
data_9_11 <- merge(data_9_11, data_weights, by = "seriali") |>
  select(surveyyear = SurveyYear, totalredmeat, aoac_fibre = AOACFibreg, sex = Sex, age = AgeR, weight, country = Country, processed.poultry = ProcessedPoultryg, processed.redmeat = ProcessedRedMeatg, burgers = Burgersg, sausages = Sausagesg)

# RBind all data together
data_ndhns <- rbind(data_1_4, data_5_6) |>
  rbind(data_7_8) |>
  rbind(data_9_11) |>
  # Filter to adults
  filter(age >= 19) |>
  mutate(country = if_else(country == "NI", "Northern Ireland", country)) |>
  # Create new weights
  group_by(sex, country) |>
  mutate(
    weight = case_when(
      between(surveyyear, 1, 4) ~ weight * sum(weight) * (1/sum(weight*between(surveyyear, 1, 4))) * (4/11),
      between(surveyyear, 5, 6) ~ weight * sum(weight) * (1/sum(weight*between(surveyyear, 5, 6))) * (2/11),
      between(surveyyear, 7, 8) ~ weight * sum(weight) * (1/sum(weight*between(surveyyear, 7, 8))) * (2/11),
      between(surveyyear, 9, 11) ~ weight * sum(weight) * (1/sum(weight*between(surveyyear, 9, 11))) * (3/11)),
    
    weight = weight/mean(weight),
    
    sex = if_else(sex == 1, "Men", "Women"),

    surveyyear_cat = case_when(
      surveyyear <= 2 ~ 2009,
      surveyyear <= 4 ~ 2011,
      surveyyear <= 6 ~ 2013,
      surveyyear <= 8 ~ 2015,
      surveyyear <= 11 ~ 2017.5,
      TRUE ~ NA)
   )

# Plot
data_ndhns |>
  group_by(surveyyear_cat, sex, country) |>
  mutate(fibre_rec = weight*(aoac_fibre  >= 30)) |>
  summarise(mean_weight = mean(weight), fibre_rec = 100*sum(fibre_rec)/sum(weight)) |>
  ggplot(aes(x= surveyyear_cat, y = fibre_rec, colour = country)) +
  geom_point() +
  geom_line() +
  xlab("Year") +
  ylab("% Meeting Fibre Intake Guidelines*") +
  ggtitle("% Meeting Fibre Intake Guidelines in UK") +
  labs(colour = "Country", caption = "*Guidelines are 30g of Fibre per day") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major.x = element_line(color = "grey92", size = 0.5),  # Adjust grid lines
        panel.grid.minor.x = element_blank()) +
  facet_wrap(~sex, scales = "fixed", dir = "v") +
  scale_x_continuous(limits = c(floor(min(data_ndhns$surveyyear_cat)), ceiling(max(data_ndhns$surveyyear_cat))),
                     breaks = floor(min(data_ndhns$surveyyear_cat)):ceiling(max(data_ndhns$surveyyear_cat)))

# Save plot
ggsave(filename = paste0(output_filepath, "Risk Factor Figure 3 - Fibre.png"), width = 8, height = 9, bg = "white")

```

#### Processed Meat Consumption
```{r, fig.height=9, fig.width=8}


# Plot
data_ndhns |>
  group_by(surveyyear_cat, sex, country) |>
  summarise(total = n(), mean_weight = mean(weight), processed.meat = sum(weight*(processed.redmeat + processed.poultry + sausages + burgers))/sum(weight)) |>
  ggplot(aes(x= surveyyear_cat, y = processed.meat, colour = country)) +
  geom_point() +
  geom_line() +
  xlab("Year") +
  ylab("Processed Meat Consumption (g/day)") +
  ggtitle("% Processed Meat Consumption in the UK") +
  labs(colour = "Country") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major.x = element_line(color = "grey92", size = 0.5),  # Adjust grid lines
        panel.grid.minor.x = element_blank()) +
  facet_wrap(~sex, scales = "fixed", dir = "v")  +
  scale_x_continuous(limits = c(floor(min(data_ndhns$surveyyear_cat)), ceiling(max(data_ndhns$surveyyear_cat))),
                     breaks = floor(min(data_ndhns$surveyyear_cat)):ceiling(max(data_ndhns$surveyyear_cat)))

# Save plot
ggsave(filename = paste0(output_filepath, "Risk Factor Figure 4 - Processed Meat.png"), width = 8, height = 9, bg = "white")


```

### Cancer Incidence

#### Joinpoint Analysis

```{r, fig.height = 9, fig.width = 30, results = "asis"}

# Read in data
incidence_jp <- read.delim(r"(C:\Users\rfrost\OneDrive - The Institute of Cancer Research\Documents\UK-cancer-trends\Data\Cancer Trends\Source Data\Cancer_Incidence_Data_Joinpoint.txt)", sep = "\t")

# Loop through countries
for(country in unique(incidence_jp$Country)){
  
  cancer_data_spec <- filter(incidence_jp, Country == country)
  
  plot <- apc_full_table(cancer_data_spec, title = paste0("Cancer Incidence in ", country))
  
  print(plot)
  
  gtsave(plot, filename = paste0(output_filepath, "Incidence Figure 1(", letters[which(unique(incidence_jp$Country) == country)] , ") - Trends Table ", country, ".html"))
  
  
}


```

### Cancer Mortality

#### Joinpoint Plot
```{r}

# Read in data
mortality_jp <- read.delim(r"(C:\Users\rfrost\OneDrive - The Institute of Cancer Research\Documents\UK-cancer-trends\Data\Cancer Trends\Source Data\Cancer_Mortality_Data_Joinpoint.txt)", sep = "\t")
mortality_data <- read.csv(r"(C:\Users\rfrost\OneDrive - The Institute of Cancer Research\Documents\UK-cancer-trends\Data\Cancer Trends\Source Data\Cancer_Mortality_Data.csv)")

for(cancer in c("Breast")){
  print(plot_joinpoint_output(cancer, sex = 3, mortality_data, mortality_jp, "Mortality", projection.yr = 2040, start.yr = 1993, projection.target = 0.85, report.APC = T))
}

```

#### Joinpoint Analysis
```{r, fig.height = 9, fig.width = 30, results = "asis"}

# Read in data
mortality_jp <- read.delim(r"(C:\Users\rfrost\OneDrive - The Institute of Cancer Research\Documents\UK-cancer-trends\Data\Cancer Trends\Source Data\Cancer_Mortality_Data_Joinpoint.txt)", sep = "\t")

# Loop through countries
for(country in unique(mortality_jp$Country)){
  
  cancer_data_spec <- filter(mortality_jp, Country == country)
  
  plot <- apc_full_table(cancer_data_spec, title = paste0("Cancer Mortality in ", country))
  
  print(plot)
  
  gtsave(plot, filename = paste0(output_filepath, "Mortality Figure 1(", letters[which(unique(mortality_jp$Country) == country)] , ") - Trends Table ", country, ".html"))
  
  
}

```

#### Joinpoint Analysis (Rolling Average)
```{r, fig.height = 9, fig.width = 30, results = "asis"}

# Read in data
mortality_jp <- read.delim(r"(C:\Users\rfrost\OneDrive - The Institute of Cancer Research\Documents\UK-cancer-trends\Data\Cancer Trends\Source Data\Cancer_Mortality_Data_Rolling_Avg_Joinpoint.txt)", sep = "\t")

# Loop through countries
for(country in unique(mortality_jp$Country)){
  
  cancer_data_spec <- filter(mortality_jp, Country == country)
  
  plot <- apc_full_table(cancer_data_spec, title = paste0("Cancer Mortality in ", country))
  
  print(plot)
  
  gtsave(plot, filename = paste0(output_filepath, "Mortality Figure 2(", letters[which(unique(mortality_jp$Country) == country)] , ") - Trends Table (Rolling Average) ", country, ".html"))
  
  
}

```

#### Meeting Targets
```{r, results = "asis"}

mortality_jp <- read.delim(r"(C:\Users\rfrost\OneDrive - The Institute of Cancer Research\Documents\UK-cancer-trends\Data\Cancer Trends\Source Data\Cancer_Mortality_Data_Joinpoint.txt)", sep = "\t")

for(Country in unique(mortality_jp$Country)){
  
  mortality_jp_spec <- mortality_jp[mortality_jp$Country == Country,]
  
  plot <- meet_targets_table(target = 0.85, target.year = 2040, data_jp = mortality_jp_spec, target.start = 2024, title = paste0("JP Target Analysis: ", Country))
  print(plot)
  gtsave(plot, filename = paste0(output_filepath, "Mortality Figure 3 - Meeting CRUK Targets - ", Country, ".png"))
  
}

```

#### Meeting Targets (Rolling Average)
```{r, results = "asis"}

mortality_jp <- read.delim(r"(C:\Users\rfrost\OneDrive - The Institute of Cancer Research\Documents\UK-cancer-trends\Data\Cancer Trends\Source Data\Cancer_Mortality_Data_Rolling_Avg_Joinpoint.txt)", sep = "\t")

for(Country in unique(mortality_jp$Country)){
  
  mortality_jp_spec <- mortality_jp[mortality_jp$Country == Country,]
  
  plot <- meet_targets_table(target = 0.85, target.year = 2040, data_jp = mortality_jp_spec, target.start = 2024, title = paste0("JP Target Analysis: ", Country))
  print(plot)
  gtsave(plot, filename = paste0(output_filepath, "Mortality Figure 4 - Meeting CRUK Targets (Rolling Average) - ", Country, ".png"))
  
}

```



