---
title: "Cancer Projections Globocan"
format: 
  html:
    toc: true
    toc-depth: 5
    grid:
      sidebar-width: 300px
      body-width: 2000px
      margin-width: 300px
      gutter-width: 1.5rem
editor: visual
---

## Packages

```{r}
library(tidyr)
library(dplyr)
library(readxl)
library(ggplot2)
library(gridExtra)
library(scales)
library(gt)
```

## Setup

```{r, setup}
# knitr::opts_knit$set(root.dir = "C:/Users/rfrost/OneDrive - The Institute of Cancer Research/Documents/Position Paper/Data")
knitr::opts_knit$set(root.dir = "C:/Users/rfrost/OneDrive - The Institute of Cancer Research/Documents/UK-cancer-trends/Data/Cancer Trends")
knitr::opts_chunk$set(echo = FALSE)
theme_set(theme_minimal())
```

## Functions

### Extracting JP data

```{r}

extract_joinpoint_splines <- function(data_jp){
  
  # browser()
  
  if(nrow(data_jp)==0){
    return(data.frame(Year = integer(0), Model = integer(0), section = integer(0), APC = integer(0)))
  }
  
  # Getting initial joins, as well as the APC (just before) the joins
  joins <- data_jp |>
    mutate(APC = case_when(!is.na(Flag) ~ lag(APC), TRUE ~ APC)) |>
    filter(grepl(Flag, pattern = "Joinpoint")) |>
    mutate(section = as.numeric(gsub(Flag, pattern = "Joinpoint ", replacement = "")))
  
  # Need a second set so we have full joins for both sides
  joins2 <- joins |>
    mutate(section = section + 1)
  
  # Getting start and end points and adding in joins from there
  start_end <- data_jp |>
    filter(row_number() %in% c(1, nrow(data_jp))) |>
    arrange(Year) |>
    mutate(section = case_when(
      row_number() == 1 ~ 1,
      row_number() == 2 ~ Joinpoints[1] + 1
    )) |>
    rbind(joins) |>
    rbind(joins2) |>
    mutate(APC = as.numeric(gsub(APC, pattern = "\\*", replacement = ""))) |>
    select(Year, Model, section, APC) |>
    arrange(Year, section)
  
  
  output_data <- data.frame()

  # Adding in points to get to exponential curves
  for(i in 1:(max(data_jp$Joinpoints)+1)){
    
    tempdata <- start_end[start_end$section == i,]

    new_data <- data.frame(Year = seq(tempdata$Year[1], tempdata$Year[2], by = 0.1))
    new_data$Model <- seq(log(tempdata$Model[1]), log(tempdata$Model[2]), by = (log(tempdata$Model[2]) - log(tempdata$Model[1]))/(nrow(new_data)-1))
    new_data$Model <- exp(new_data$Model)
    new_data$section <- i
    new_data$APC <- tempdata$APC[!is.na(tempdata$APC)][2]

    output_data <- rbind(output_data, new_data)

  }
  
  return(output_data)
  
}
```

### Projecting data forward

```{r}
get_proj_data <- function(data, data_jp, projection.yr){
  
  if(nrow(data_jp)==0){
    return(data.frame(Year = numeric(0), lograte = numeric(0), rate = numeric(0)))
  }
  
 final <- data_jp |>
    arrange(desc(Year)) |>
    filter(row_number() == 1) |>
    mutate(APC = as.numeric(gsub(APC, pattern = "\\*", replacement = "")),
           APCnew = 1 + APC/100)
  
  proj_data <- data.frame(Year = seq(final$Year, projection.yr, by = 0.1))
  proj_data$lograte <- seq(from = log(final$Model), by = log((final$APCnew)^(1/10)), length.out = nrow(proj_data))
  proj_data$rate <- exp(proj_data$lograte)
  
  return(proj_data)
    
}
```

### Plotting function

```{r}
plot_joinpoint_output <- function(cancer, sex = 3, data, data_jp, incmort, start.yr = NA, projection.yr = NA, projection.target = NA, report.APC = FALSE){
  
  # browser()
  
  data <- data |> 
    filter(`Cancer label` == cancer)
    
    # Filter both dataframes for the relevant data
  data <- data |>
    filter(Year >= max(c(start.yr, min(Year)), na.rm = T)) |>
    mutate(Sex = ifelse(Sex==1, "Men", "Women"))
  
  data_jp <- data_jp |>
    filter(Cancer.label == cancer)
  
  data_jp_men <- data_jp |>
    filter(Sex == 1)
  
  data_jp_women <- data_jp |>
    filter(Sex == 2) 
  
  # Call function to extract useful information from joinpoint data
  
  jp_plot_men <- extract_joinpoint_splines(data_jp_men) |>
    mutate(Sex = "Men")
  jp_plot_women <- extract_joinpoint_splines(data_jp_women) |>
    mutate(Sex = "Women")
  
  jp_plot <- rbind(jp_plot_men, jp_plot_women) |>
    filter(Year >= max(c(start.yr, min(Year)), na.rm = T))
  
  # Making variable for dynamic plot title generation
  projection <- !is.na(projection.yr)
  proj_lab <- ifelse(projection, "Projections", "Trends")
  
  # Creating colour + shape reference for lines
  plot_cols <- hue_pal()(length(unique(jp_plot$section)))
  plot_lty <- c("solid", "dashed")
  jp_plot <- jp_plot |>
    arrange(Sex, Year) |>
    mutate(col = plot_cols[dense_rank(section)],
           lty = ifelse(Sex == "Men", "solid", "dashed"),
           APC = factor(APC, levels = unique(APC)))
  
  plot_cols <- jp_plot$col
  names(plot_cols) <- jp_plot$APC
  
  plot_lty <- jp_plot$lty
  names(plot_lty) <- jp_plot$APC
  
  # Get breaks
  plot_breaks <- min(jp_plot$Year):max(jp_plot$Year)
  
  # Initial plotting of trends
  plot <- ggplot() +
    geom_line(data = jp_plot, aes(x = Year, y = Model, colour = APC, linetype = APC)) +
    scale_color_manual(values = plot_cols, name = "APC") +
    scale_linetype_manual(values = plot_lty, name = "APC") +
    geom_point(data = data, aes(x = Year, y = `ASR (World)`, shape = Sex)) +
    ggtitle(paste0(incmort, " ", proj_lab, " for ", cancer, " Cancer")) +
    # scale_x_continuous(breaks = plot_breaks) +
    # theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    ylab("ASR per 100,000")
      
  
    # If projection is desired, impute data to that point.
  if(projection){
    
    proj_data_men <- get_proj_data(data[data$Sex==1,], data_jp_men, projection.yr) |>
      mutate(Sex = "Men")
    proj_data_women <- get_proj_data(data[data$Sex==2,], data_jp_women, projection.yr) |>
      mutate(Sex = "Women")
    
    # Adjusting breaks
    plot_breaks <- min(plot_breaks):projection.yr
    
    # Plotting extrapolation
    plot <- plot +
      geom_line(data = proj_data_men, aes(x = Year, y = rate), linetype = "solid") +
      geom_line(data = proj_data_women, aes(x = Year, y = rate), linetype = "dashed")
    
    
    if(!is.na(projection.target)){
      
      # Getting final ASR data point to project from
      final_ASR_men <- data |>
        filter(Sex == "Men") |>
        arrange(desc(Year)) |>
        filter(row_number()==1) |>
        pull(`ASR (World)`)
      
      final_ASR_women <- data |>
        filter(Sex == "Women") |>
        arrange(desc(Year)) |>
        filter(row_number()==1) |>
        pull(`ASR (World)`)
      
      if(length(final_ASR_men)>0 & length(final_ASR_women)>0){
        
        plot <- plot + 
        geom_hline(yintercept = final_ASR_men*projection.target, colour = "lightgreen") +
        geom_hline(yintercept = final_ASR_women*projection.target, colour = "lightgreen", linetype = "dashed") +
        labs(caption = paste0("Green lines represents goals of ", 100*(1-projection.target), "% reduction in mortality rate in the UK by ", projection.yr))
        
      } else if(length(final_ASR_men)>0){
        
        plot <- plot + 
        geom_hline(yintercept = final_ASR_men*projection.target, colour = "lightgreen") +
        labs(caption = paste0("Green line represents goal of ", 100*(1-projection.target), "% reduction in mortality rate in the UK by ", projection.yr))
        
      } else {
        
        plot <- plot + 
        geom_hline(yintercept = final_ASR_women*projection.target, colour = "lightgreen", linetype = "dashed") +
        labs(caption = paste0("Green line represents goal of ", 100*(1-projection.target), "% reduction in mortality rate in the UK by ", projection.yr))
        
      }
      
    }
    

  }
  
  # Getting plot_breaks and adding to plot
  plot_breaks <- plot_breaks[plot_breaks%%2 == 1]
  
  plot <- plot +
    scale_x_continuous(breaks = plot_breaks) +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
  
  
  
  if(!report.APC){
    plot <- plot +
      guides(colour = "none",
             linetype = "none")
    
  }
  
  return(plot)
  
}

```

### Meeting Targets Function

```{r}

meet_targets <- function(targets, target.year, data_jp){
  
  if(length(targets) != length(target.year)){
    stop("ERROR in input")
  }
  
  for(cancer in unique(data_jp$Cancer.label)){
    for(sex in unique(data_jp$Sex)){
      
      # Filter data to sex and cancer of interest
      temp_data <- data_jp |>
        filter(Cancer.label == cancer, Sex == sex)
      
      if(nrow(temp_data)>0){
        
        cat("\nCancer:", cancer, "\nSex:", sex, "\n")
        
        # Iterate over the targets to see if any of them are met
        for(i in seq_along(targets)){
        
          cat("Target:", 100*(1-targets[i]), "% by", target.year[i], "\n")
          
          # Get final APC to extrapolate from
          finalAPC <- temp_data |>
            arrange(desc(Year)) |>
            filter(row_number()==1) |>
            pull(APC)
          
          finalAPC <- as.numeric(gsub(finalAPC, pattern = "\\*", replacement = ""))
          
          # Go from APC to percentage change mulitplier
          finalAPC_num <- 1+finalAPC/100
          
          finalyear <- temp_data |>
            arrange(desc(Year)) |>
            filter(row_number()==1) |>
            pull(Year)
          
          # Years left until target year
          yearsremaining <- target.year[i]  - finalyear
          
          # Check if target is reached
          if(finalAPC_num^yearsremaining<=targets[i]){
            
            yearachieved <- log(targets[i])/log(finalAPC_num) + finalyear
            
            cat(paste0("SUCCESS - Target achieved in ", floor(yearachieved), "\n"))
            
          } else {
            
            goalAPC <- targets[i]^(1/yearsremaining)
            
            goalAPC <- 100*(goalAPC-1)
            
            cat(paste0("FAILURE - Target not achieved. Need to decrease APC from ", finalAPC, " to ", goalAPC, "\n"))
            
          }
        }
      }
    }
  }
}

meet_targets_table <- function(targets, target.year, data_jp){

  output.table <- data.frame(Cancer = character(0), Sex = character(0), APC_Req = character(0), Pace = character(0), Year_Ach = character(0))

  for(cancer in unique(data_jp$Cancer.label)){
    for(sex in unique(data_jp$Sex)){
      
      # Filter data to sex and cancer of interest
      temp_data <- data_jp |>
        filter(Cancer.label == cancer, Sex == sex)
      
      if(nrow(temp_data)>0){
        
        # Get final APC to extrapolate from
        finalAPC <- temp_data |>
          arrange(desc(Year)) |>
          filter(row_number()==1) |>
          pull(APC)
        
        finalAPC <- as.numeric(gsub(finalAPC, pattern = "\\*", replacement = ""))
        
        # Go from APC to percentage change mulitplier
        finalAPC_num <- 1+finalAPC/100
        
        finalyear <- temp_data |>
          arrange(desc(Year)) |>
          filter(row_number()==1) |>
          pull(Year)
        
        # Years left until target year
        yearsremaining <- target.year  - finalyear
        
        yearachieved <- ifelse(finalAPC_num<1, floor(log(targets)/log(finalAPC_num)) + finalyear, "-")
          
        goalAPC <- targets^(1/yearsremaining)
        
        goalAPC <- 100*(goalAPC-1)
        
        new_row <- c(cancer, sex, round(goalAPC, digits = 3),  round(finalAPC, digits = 3),  yearachieved)

      } else {
        
        new_row <- c(cancer, sex, "-", "-", "-")
        
      }
      
      output.table[nrow(output.table)+1,] <- new_row
      
    }
  }
  
  output.table <- output.table |>
    mutate(Sex = ifelse(Sex == 1, "Men", "Women")) |>
    gt() |>
    # Header Creation
    tab_header(
      title = md(paste0("**Globocan JoinPoint Target Analysis**")),
      subtitle = "For a Goal of a 15% Reduction in Mortality by 2040"
    ) |>
    
    # Head Rows
    tab_style(
      style = list(
        cell_text(weight = "bold", align = "center")
      ),
      locations = cells_column_labels(columns = everything())
    ) |>
    
    # Body rows
    tab_style(
      style = list(
        cell_text(align = "center")
      ),
      locations = cells_body(
          columns = everything()
      )
    ) |>
    
    # Rename columns
    cols_label(
      APC_Req = "APC Requried",
      Pace = "Current APC",
      Year_Ach = "Year Achieved"
    )
    
  
  return(output.table)

}
```

### APC Trend Table Function

```{r}
apc_table <- function(data_jp, title = NA){
  # Initialise table
  apc_table <- data.frame(Cancer = character(0), period_women = character(0), apc_women = character(0), period_men = character(0), apc_men = character(0))

  # Relabel sex variable to be easier to understand
  jp_table <- data_jp |>
    mutate(Sex = if_else(Sex == 2, "Women", "Men"))

  # Loop through cancer locations and sexes, adding to the table sequentially

  for(cancer in unique(jp_table$Cancer.label)){

    # Initialise row for output
    output_row <- cancer

    for(sex in unique(jp_table$Sex)){

      # Filter data to data on sex and cancer of interest
      spec_data <- filter(jp_table, Sex == sex & Cancer.label == cancer)

      # If no data - output NA's, else calculate period of most recent APC and APC
      if(nrow(spec_data)==0){
        output_row <- append(output_row, rep(NA, 2))
      } else {

        # Arrange by year and take the last APC segment
        spec_data <- arrange(spec_data, Year)

        join_years <- spec_data$Year[is.na(spec_data$APC)]

        # If joins, take the final segment, if not then leave the data alone
        if(length(join_years)>0){
          spec_data <- spec_data[spec_data$Year>=max(join_years),]
        }

        # Period
        period <- paste0(min(spec_data$Year), "-", max(spec_data$Year))

        # APC
        apc <- unique(spec_data$APC)[!is.na(unique(spec_data$APC))]

        if(length(apc)>1){
          stop("ERROR: final join not detected")
        }

        # Make APC pretty
        if(grepl(apc, pattern = "\\*")){
          numeric_apc <- gsub(apc, pattern = "\\*", replacement = "")
          numeric_apc <- round(as.numeric(numeric_apc), digits = 2)
          apc <- paste0(numeric_apc, "%*")
        } else {
          apc <- paste0(round(as.numeric(apc), digits = 2), "%")
        }


        # create output row
        output_row <- append(output_row, c(period, apc))

      }

    }

    apc_table[nrow(apc_table)+1,] <- output_row

  }


  # Make table pretty for output
  apc_table |>
    # Make NA's pretty
    mutate_all(~ replace_na(., "-")) |>
    gt() |>

    # Header Creation
    tab_header(
      title = md(paste0("**",ifelse(is.na(title), "", title),"**"))
    ) |>

    # Head Rows
    tab_style(
      style = list(
        cell_text(weight = "bold", align = "center")
      ),
      locations = cells_column_labels(columns = everything())
    ) |>

    # Tab spanners for sex
    tab_spanner(
      label = "Women",
      columns = ends_with("_women")
    ) |>

    tab_spanner(
      label = "Men",
      columns = ends_with("_men")
    ) |>

    # Body rows
    tab_style(
      style = list(
        cell_text(align = "center")
      ),
      locations = cells_body(
          columns = everything()
      )
    ) |>

    # Rename columns
    cols_label(
      period_women = "Period",
      period_men = "Period",
      apc_women = "APC",
      apc_men = "APC"
    ) |>

    # Add caption
    tab_footnote("* Indicates an APC significantly different from 0")



}


```

### APC Barchart Function

```{r}
apc_barchart <- function(data_jp, title){
  # Initialise table
  apc_table <- data.frame(Cancer = character(0), period_women = character(0), apc_women = character(0), period_men = character(0), apc_men = character(0))

  # Relabel sex variable to be easier to understand
  jp_table <- data_jp |>
    mutate(Sex = if_else(Sex == 2, "Women", "Men"))

  # Loop through cancer locations and sexes, adding to the table sequentially

  for(cancer in unique(jp_table$Cancer.label)){

    # Initialise row for output
    output_row <- cancer

    for(sex in c("Women", "Men")){

      # Filter data to data on sex and cancer of interest
      spec_data <- filter(jp_table, Sex == sex & Cancer.label == cancer)

      # If no data - output NA's, else calculate period of most recent APC and APC
      if(nrow(spec_data)==0){
        output_row <- append(output_row, rep(NA, 2))
      } else {

        # Arrange by year and take the last APC segment
        spec_data <- arrange(spec_data, Year)

        join_years <- spec_data$Year[is.na(spec_data$APC)]

        # If joins, take the final segment, if not then leave the data alone
        if(length(join_years)>0){
          spec_data <- spec_data[spec_data$Year>=max(join_years),]
        }

        # Period
        period <- paste0(min(spec_data$Year), "-", max(spec_data$Year))

        # APC
        apc <- unique(spec_data$APC)[!is.na(unique(spec_data$APC))]

        if(length(apc)>1){
          stop("ERROR: final join not detected")
        }

        # Make APC pretty
        if(grepl(apc, pattern = "\\*")){
          numeric_apc <- gsub(apc, pattern = "\\*", replacement = "")
          numeric_apc <- round(as.numeric(numeric_apc), digits = 2)
          apc <- paste0(numeric_apc, "%*")
        } else {
          apc <- paste0(round(as.numeric(apc), digits = 2), "%")
        }


        # create output row
        output_row <- append(output_row, c(period, apc))

      }

    }

    apc_table[nrow(apc_table)+1,] <- output_row

  }
  
  # browser()

  # Manipulate table so it is ready for plotting
  apc_table <- apc_table |> 
    pivot_longer(cols = c(apc_women, apc_men)) |>
    mutate(
      
      sex = gsub(name, pattern = "apc\\_", replacement = ""),
      
      sex = ifelse(sex == "men", "Men", "Women"),
      
      apc = gsub(value, pattern = "\\%", replacement = ""),
      
      significant = grepl(apc, pattern = "\\*"),
      
      apc = as.numeric(gsub(apc, pattern = "\\*", replacement = ""))
      
    )
  
  # Create plot
  plot <- apc_table |>
    ggplot(aes(x = Cancer, y = apc, fill = sex)) +
    geom_bar(stat = "identity", position = position_dodge()) +
    geom_hline(yintercept = 0) +
    ggtitle(title) +
    ylab("APC") +
    scale_fill_discrete(name = "Sex") +
    geom_text(aes(label = ifelse(significant, "*", ""),
            vjust = ifelse(apc>0, 0, 1.2)),
            position = position_dodge(width = 0.9),
            size = 6) + 
  labs(caption = "* Indicates an APC significantly different from 0")
    
    
  

  return(plot)

}


```

## Cancer Incidence/Mortality

```{r, fig.width=20}

# Read in all data
data <- read_excel("Globocan/Cancer_Projection_Data.xlsx") |>
  rbind(read_excel("Globocan All/Cancer_Projection_Data_All.xlsx")) |>
  mutate(`Cancer label` = case_when(
    `Cancer label` == "Colorectum" ~ "Colorectal",
    `Cancer label` == "Oesophagus" ~ "Oesophageal",
    `Cancer label` == "Pancreas" ~ "Pancreatic",
    `Cancer label` == "All sites excl. non-melanoma skin cancer" ~ "All",
    TRUE ~ `Cancer label`
  ))

# Incidence data
incidence_data <- data |>
  filter(Type == 0)

incidence_jp <- read.delim("Globocan/Cancer_Incidence_Joinpoint.txt", sep = "\t") |>
  mutate(Cancer.label = case_when(
    Cancer.label == "Colorectum" ~ "Colorectal",
    Cancer.label == "Oesophagus" ~ "Oesophageal",
    Cancer.label == "Pancreas" ~ "Pancreatic",
    TRUE ~ Cancer.label
  ))

all_incidence_jp <- read.delim("Globocan All/Cancer_Incidence_Joinpoint_All.txt", sep = "\t") |>
  mutate(Cancer.label = "All")

incidence_jp <- incidence_jp |>
  rbind(all_incidence_jp)

# Mortality data
mortality_data <- data |>
  filter(Type == 1)

mortality_jp <- read.delim("Globocan/Cancer_Mortality_Joinpoint.txt", sep = "\t") |>
  mutate(Cancer.label = case_when(
    Cancer.label == "Colorectum" ~ "Colorectal",
    Cancer.label == "Oesophagus" ~ "Oesophageal",
    Cancer.label == "Pancreas" ~ "Pancreatic",
    TRUE ~ Cancer.label
  ))

all_mortality_jp <- read.delim("Globocan All/Cancer_Mortality_Joinpoint_All.txt", sep = "\t") |>
  mutate(Cancer.label = "All")

mortality_jp <- mortality_jp |>
  rbind(all_mortality_jp)

# Gettings cancers and sexes and looping over all.
cancers <- unique(mortality_data$`Cancer label`)
sexes <- c(1,2)

# for(cancer in cancers){
#   for(sex in sexes){
#     if((cancer == "Prostate" & sex == 2) | 
#        (cancer == "Breast" & sex == 1)){
#       
#     } else {
#       p1 <- plot_joinpoint_output(cancer, sex, incidence_data, incidence_jp, "Incidence")
#       # plots[[paste0(cancer, "|", sex, "|Incidence")]] <- plot_joinpoint_output(cancer, sex, incidence_data, incidence_jp, "Incidence")
#       p2 <- plot_joinpoint_output(cancer, sex, mortality_data, mortality_jp, "Mortality", projection.yr = 2040, projection.target = 0.85)
#       # plots[[paste0(cancer, "|", sex, "|Mortality")]] <- plot_joinpoint_output(cancer, sex, mortality_data, mortality_jp, "Mortality", projection.yr = 2035, projection.target = 0.91)
#       grid.arrange(p1, p2, nrow = 1, widths = c(4,4))
#     }
#   }
# }

for(cancer in cancers){
  p1 <- plot_joinpoint_output(cancer, sex = 3, incidence_data, incidence_jp, "Incidence", report.APC = T)
  p2 <- plot_joinpoint_output(cancer, sex = 3, mortality_data, mortality_jp, "Mortality", projection.yr = 2040, start.yr = 1993, projection.target = 0.85, report.APC = T)
  grid.arrange(p1, p2, nrow = 1, widths = c(4,4))
}

```

## Meeting Targets Table

```{r}
meet_targets_table(targets = c(0.85), target.year = c(2040), data_jp = mortality_jp)
```

## APC Trends Table UK

```{r}

apc_table(incidence_jp, title = "Recent Trends for Cancer Incidence")

apc_table(mortality_jp, title = "Recent Trends for Cancer Mortality")


```



## Pretty Plots for Presentation - BC Incidence

```{r}

# Filter both dataframes for the relevant data
# data <- incidence_data |>
#   filter(`Cancer label` == "Breast")
# data_jp <- incidence_jp |>
#   filter(Cancer.label == "Breast")
# 
# jp_plot <- extract_joinpoint_splines(data_jp)
# 
# plot <- ggplot(data = data, aes(x = Year, y = `ASR (World)`)) +
#     geom_point() +
#     geom_line(data = jp_plot, aes(x = Year, y = Model, colour = factor(APC, levels = unique(APC)))) +
#     scale_colour_discrete() +
#     labs(colour = "APC (%)") +
#     ggtitle("Incidence Projections for Breast Cancer in the UK")
# 
# final <- data_jp |>
#   arrange(desc(Year)) |>
#   filter(row_number() == 1) |>
#   mutate(APC = as.numeric(gsub(APC, pattern = "\\*", replacement = "")),
#          APCnew = 1 + APC/100)
# 
# final_data <- data |>
#   arrange(desc(Year)) |>
#   filter(row_number()==1)
# 
# 
# proj_data <- data.frame(Year = seq(final$Year, 2040, by = 0.1))
# proj_data$lograte <- seq(from = log(final$Model), by = log((final$APCnew)^(1/10)), length.out = nrow(proj_data))
# proj_data$rate <- exp(proj_data$lograte)
# 
# plot <- plot +
#   geom_line(data = proj_data, aes(x = Year, y = rate), colour = "red", linetype = "dashed") 
# 
# plot +
#   scale_x_continuous(breaks = pretty_breaks())

plot_joinpoint_output(cancer = "Breast", data = incidence_data, data_jp = incidence_jp, incmort = "Incidence", projection.yr = 2040, report.APC = T)


```

## Pretty Plots for Presentation - BC Mortality

```{r}

# Filter both dataframes for the relevant data
# data <- mortality_data |>
#   filter(`Cancer label` == "Breast") |>
#   filter(Year >= 1993)
# data_jp <- mortality_jp |>
#   filter(Cancer.label == "Breast")
# 
# jp_plot <- extract_joinpoint_splines(data_jp) |>
#   filter(Year >= 1993)
# 
# plot <- ggplot(data = data, aes(x = Year, y = `ASR (World)`)) +
#     geom_point() +
#     geom_line(data = jp_plot, aes(x = Year, y = Model, colour = factor(APC, levels = unique(APC), labels = round(unique(APC), digits = 2)))) +
#     # scale_colour_discrete() +
#     labs(colour = "APC (%)") +
#     ggtitle("Mortality Rates for Breast Cancer in the UK")
# 
# final <- data_jp |>
#   arrange(desc(Year)) |>
#   filter(row_number() == 1) |>
#   mutate(APC = as.numeric(gsub(APC, pattern = "\\*", replacement = "")),
#          APCnew = 1 + APC/100)
# 
# final_data <- data |>
#   arrange(desc(Year)) |>
#   filter(row_number()==1)
# 
# 
# proj_data <- data.frame(Year = seq(final$Year, 2040, by = 0.1))
# proj_data$lograte <- seq(from = log(final$Model), by = log((final$APCnew)^(1/10)), length.out = nrow(proj_data))
# proj_data$rate <- exp(proj_data$lograte)
# 
# plot <- plot +
#   geom_line(data = proj_data, aes(x = Year, y = rate), colour = "red", linetype = "dashed") +
#   # geom_hline(yintercept = final_data$`ASR (World)`*0.85, colour = "forestgreen")
#   annotate("rect", xmin = max(data$Year), xmax = Inf, 
#            ymin = -Inf, ymax = final_data$`ASR (World)`*0.85,
#            alpha = 0.2, fill = "lightgreen") +
#   labs(caption = "Green box represents CRUK's goal of a 15% reduction in mortality rate in the UK by 2040")
#   
# plot +
#   scale_x_continuous(breaks = pretty_breaks())


plot_joinpoint_output(cancer = "Breast", data = mortality_data, data_jp = mortality_jp, incmort = "Mortality", projection.yr = 2040, report.APC = T, projection.target = 0.85, start.yr = 1993)


```

## Colorectal Cancer by Age

```{r}

data_young <- read_excel("Globocan Colorectal/Cancer_Projection_Data_Colorectal.xlsx", sheet = "UK_0_59")
data_old <- read_excel("Globocan Colorectal/Cancer_Projection_Data_Colorectal.xlsx", sheet = "UK_60_85")

# Incidence data
incidence_young <- data_young |>
  filter(Type == 0)

incidence_old <- data_old |>
  filter(Type == 0)

incidence_jp <- read.delim("Globocan Colorectal/Cancer_Incidence_Joinpoint_Colorectal.txt", sep = "\t")

incidence_jp_young <- incidence_jp |>
  filter(age_group == "0-59")

incidence_jp_old <- incidence_jp |>
  filter(age_group == "60-85")

# Mortality data

mortality_young <- data_young |>
  filter(Type == 1)

mortality_old <- data_old |>
  filter(Type == 1)

mortality_jp <- read.delim("Globocan Colorectal/Cancer_Mortality_Joinpoint_Colorectal.txt", sep = "\t")

mortality_jp_young <- mortality_jp |>
  filter(age_group == "0-59")

mortality_jp_old <- mortality_jp |>
  filter(age_group == "60-85")


plot_joinpoint_output(cancer = "Colorectum", data = incidence_young, data_jp = incidence_jp_young, incmort = "Incidence") +
  ggtitle("Incidence Trends for Colorectal Cancer for 0-59 Years Old")

plot_joinpoint_output(cancer = "Colorectum", data = incidence_old, data_jp = incidence_jp_old, incmort = "Incidence") +
  ggtitle("Incidence Trends for Colorectal Cancer for 60-85 Years Old")

plot_joinpoint_output(cancer = "Colorectum", data = mortality_young, data_jp = mortality_jp_young, incmort = "Mortality", projection.yr = 2040, report.APC = T, projection.target = 0.85, start.yr = 1993) +
  ggtitle("Mortality Projections for Colorectal Cancer for 0-59 Years Old")

plot_joinpoint_output(cancer = "Colorectum", data = mortality_old, data_jp = mortality_jp_old, incmort = "Mortality", projection.yr = 2040, report.APC = T, projection.target = 0.85, start.yr = 1993) +
  ggtitle("Mortality Projections for Colorectal Cancer for 60-85 Years Old")

```

## Extra Plots

```{r, fig.width=20}

# Read in all data
data <- read_excel("Globocan Extra/Cancer_Projection_Data_Extra.xlsx")

# Incidence data
incidence_data <- data |>
  filter(Type == 0)

incidence_jp <- read.delim("Globocan Extra/Cancer_Incidence_Joinpoint_Extra.txt", sep = "\t")

# Mortality data
mortality_data <- data |>
  filter(Type == 1)

mortality_jp <- read.delim("Globocan Extra/Cancer_Mortality_Joinpoint_Extra.txt", sep = "\t")

# Gettings cancers and sexes and looping over all.
cancers <- unique(mortality_data$`Cancer label`)
sexes <- c(1,2)

# for(cancer in cancers){
#   for(sex in sexes){
#     if((cancer == "Prostate" & sex == 2) | 
#        (cancer == "Breast" & sex == 1)){
#       
#     } else {
#       p1 <- plot_joinpoint_output(cancer, sex, incidence_data, incidence_jp, "Incidence")
#       # plots[[paste0(cancer, "|", sex, "|Incidence")]] <- plot_joinpoint_output(cancer, sex, incidence_data, incidence_jp, "Incidence")
#       p2 <- plot_joinpoint_output(cancer, sex, mortality_data, mortality_jp, "Mortality", projection.yr = 2040, projection.target = 0.85)
#       # plots[[paste0(cancer, "|", sex, "|Mortality")]] <- plot_joinpoint_output(cancer, sex, mortality_data, mortality_jp, "Mortality", projection.yr = 2035, projection.target = 0.91)
#       grid.arrange(p1, p2, nrow = 1, widths = c(4,4))
#     }
#   }
# }

for(cancer in cancers){
  p1 <- plot_joinpoint_output(cancer, sex = 3, incidence_data, incidence_jp, "Incidence")
  p2 <- plot_joinpoint_output(cancer, sex = 3, mortality_data, mortality_jp, "Mortality", projection.yr = 2040, start.yr = 1993, projection.target = 0.85)
  grid.arrange(p1, p2, nrow = 1, widths = c(4,4))
}

```

## England + Wales Total Cancer Plot

```{r, fig.width=20}
data <- read_excel("Globocan By Country/Cancer_Projection_Data_England_Wales.xlsx") |>
  mutate(`Cancer label` = case_when(
    `Cancer label` == "Colorectum" ~ "Colorectal",
    `Cancer label` == "Oesophagus" ~ "Oesophageal",
    `Cancer label` == "Pancreas" ~ "Pancreatic",
    `Cancer label` == "All sites excl. non-melanoma skin cancer" ~ "All",
    TRUE ~ `Cancer label`
  ))

# Incidence data
incidence_data <- data |>
  filter(Type == 0)

incidence_jp <- read.delim("Globocan By Country/England Wales/Cancer_Joinpoint_England_Wales.txt", sep = "\t") |>
  filter(incmort == "Incidence") |>
  mutate(Cancer.label = case_when(
    Cancer.label == "Colorectum" ~ "Colorectal",
    Cancer.label == "Oesophagus" ~ "Oesophageal",
    Cancer.label == "Pancreas" ~ "Pancreatic",
    Cancer.label == "All sites excl. non-melanoma skin cancer" ~ "All",
    TRUE ~ Cancer.label
  ))

# Mortality data
mortality_data <- data |>
  filter(Type == 1)

mortality_jp <- read.delim("Globocan By Country/England Wales/Cancer_Joinpoint_England_Wales.txt", sep = "\t") |>
  filter(incmort == "Mortality") |>
  mutate(Cancer.label = case_when(
    Cancer.label == "Colorectum" ~ "Colorectal",
    Cancer.label == "Oesophagus" ~ "Oesophageal",
    Cancer.label == "Pancreas" ~ "Pancreatic",
    Cancer.label == "All sites excl. non-melanoma skin cancer" ~ "All",
    TRUE ~ Cancer.label
  ))

cancers = "All"

for(cancer in cancers){
  p1 <- plot_joinpoint_output(cancer, sex = 3, incidence_data, incidence_jp, "Incidence", start.yr = 1993) +
    ggtitle("Incidence trends for All Cancers in England and Wales")
  p2 <- plot_joinpoint_output(cancer, sex = 3, mortality_data, mortality_jp, "Mortality", projection.yr = 2040, start.yr = 1993) +
    ggtitle("Mortality trends for All Cancers in England and Wales")
  grid.arrange(p1, p2, nrow = 1, widths = c(4,4))
}

```

## APC Barchart
```{r}

print(apc_barchart(incidence_jp, title = "Recent Trends for Cancer Incidence in England and Wales") + ylim(-2.5, 1.5))
ggsave("C:/Users/rfrost/OneDrive - The Institute of Cancer Research/Documents/UK-cancer-trends/Position Paper Plots/eng_wales_all_cancer_inc_barchart.png")
print(apc_barchart(mortality_jp, title = "Recent Trends for Cancer Mortality in England and Wales") + ylim(-2.5, 1.5))
ggsave("C:/Users/rfrost/OneDrive - The Institute of Cancer Research/Documents/UK-cancer-trends/Position Paper Plots/eng_wales_all_cancer_mort_barchart.png")
```
