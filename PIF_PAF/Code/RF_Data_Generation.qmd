---
title: "Risk Factor Data Generation"
format: html
editor:
  mode: source
---

#### Timer
```{r}

start.time = Sys.time()

```

## Packages
```{r}

library(matrixStats)
library(dplyr)
library(tidyr)

```

## Options
```{r}
# Initialise options list
user_options <- list()

# Whether to use age groups or just group as 'All'
#   False - all age groups 
#   True - Split the ages 20-49, 50+
user_options$age_groups_indicator <- F

# Whether to further stratify by IMD
#   False - not split by IMD 
#   True - Split by IMD
user_options$imd_stratification  <- T


```

## Setting working directory
```{r}

# Setting up wd for relative file paths
# This sets wd to wherever the document is saved - this should be the github desktop folder
if(Sys.getenv("RSTUDIO") == '1' & !knitr::is_html_output()) { # If using Rstudio and not rendering
	setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
} else if(Sys.getenv("RSTUDIO") != '1'){ # If using Rscript
	initial.options <- commandArgs(trailingOnly = FALSE)
	file.arg.name <- "--file="
	script.name <- sub(file.arg.name, "", initial.options[grep(file.arg.name, initial.options)])
	script.basename <- dirname(script.name)
	setwd(file.path(getwd(), script.basename))
}

```

## Sourcing functions
```{r}

source("Functions/hse_data_cleaning_functions.R")
source("Functions/alcohol_data_generation.R")
source("Functions/bmi_data_generation.R")
source("Functions/physical_activity_old_data_generation.R")
source("Functions/physical_activity_data_generation.R")
source("Functions/diet_data_generation.R")
source("Functions/diet_data_generation_continuous.R")
source("Functions/diet_data_generation_cat_mean.R")
source("Functions/smoking_data_generation.R")

```

## Initialising empty dataset
```{r}

rf_df <- data.frame(variable = numeric(0), year = numeric(0), age_group = character(0), sex = character(0), level = character(0), value = numeric(0), N = numeric(0))

# If desired - add IMD column
if(user_options$imd_stratification){
  rf_df$imd <- character(0)
}

```

## Going through variables adding to dataset

### HSE - Alcohol
```{r}

alcohol_df <- alcohol_data_gen(filepath = "../../../Data", user_options) |>
  fix_hse_2004_weighting()
rf_df <- rbind(rf_df, alcohol_df)

```

### HSE - BMI
```{r}

bmi_df <- bmi_data_gen(filepath = "../../../Data", user_options) |>
  fix_hse_2004_weighting()
rf_df <- rbind(rf_df, bmi_df)

```

### HSE - Smoking
```{r}

smoking_df <- smoking_data_gen(filepath = "../../../Data", user_options) |>
  fix_hse_2004_weighting()
rf_df <- rbind(rf_df, smoking_df)

```
### HSE - Physical Activity (Old)
```{r}

activity_old_df <- physical_activity_old_data_gen(filepath = "../../../Data", user_options) |>
  fix_hse_2004_weighting()

rf_df <- rbind(rf_df, activity_old_df)

```

### HSE - Physical Activity
```{r}

activity_df <- physical_activity_data_gen(filepath = "../../../Data", user_options) |>
  fix_hse_2004_weighting()

rf_df <- rbind(rf_df, activity_df)

```

### GHS - Alcohol 2005
```{r}

ghs_data <- read.delim("../../../Data/UKDA-5640-tab/tab/ghs05client.tab", header = F)

# Filter to columns of interest
ghs_data <- ghs_data[,c(4,5, 231, 341, 1310)]
colnames(ghs_data) <- ghs_data[1,]
ghs_data <- ghs_data[-1,]

# Get data on variable
ghs_data <- ghs_data |>
  mutate(
    
    age = as.numeric(age),
    
    drating = as.numeric(drating),
    
    weight05 = as.numeric(weight05)
     
  ) |>
  filter(drating >= 0) |>
  filter(age >= 20) |>
  # filter(age >= 16) |>
  filter(country == 1) |>
  mutate(
    
    sex = if_else(sex == 1, "Men", "Women"),

    alcohol_cat = case_when(
      drating == 0 ~ "Non-Drinker",
      drating < 11 ~ "Light Drinker",
      drating < 44 ~ "Moderate Drinker",
      TRUE ~ "Heavy Drinker")
    
    # alcohol_cat = case_when(
    #   round(drating, digits = 0) == 0 ~ "NON-DRINKER",
    #   TRUE ~ "DRINKER"
    # )
    
  )

# Apply age grouping based on user input
if(user_options$age_groups_indicator){
  ghs_data <- mutate(ghs_data, age_group = if_else(age<50, "20-49", "50+"))
} else {
  ghs_data$age_group = "All"
}

ghs_data <- ghs_data |>
  group_by(sex, age_group) |>
  mutate(total_weight = sum(weight05)/744.0531, 
         # total_weight_adj = sum(weight05)/744.0531,
         total = n()
         ) |>
  ungroup() |>
  group_by(sex, age_group, alcohol_cat) |>
  summarise(value = sum(weight05/744.0531)/total_weight[1],
            N = total[1],
            # total_weight_adj = total_weight_adj[1],
            # total = total[1]
            ) |>
  mutate(variable = "alcohol_amt",
         year = 2005) |>
  rename(level = alcohol_cat)

# No IMD data so append "All" if needed
if(user_options$imd_stratification){
  ghs_data$imd <- "All"
}

# Add to data
rf_df <- rbind(rf_df, ghs_data)



```

### NDNS
```{r}

diet_df <- diet_data_gen(filepath = "../../../Data", user_options) |>
  ungroup()

# Go through variables and ensure that complete categories are provided
# This code assumes that across all the strata, each category is represented at least once - if this is nto the case will change to a manual specification
for(var in unique(diet_df$variable)){
  
  # Get categories
  categories <- diet_df |>
    filter(variable == var) |>
    pull(level) |>
    unique()
  
  # Complete categories for variable
  diet_df_temp <- diet_df |>
    filter(variable == var) |>
    complete(age_group, sex, year, level = categories) |>
    group_by(age_group, sex, year) |>
    mutate(
      
      year = if_else(is.na(year), first(na.omit(year)), year),
      age_group = if_else(is.na(age_group), first(na.omit(age_group)), age_group),
      sex = if_else(is.na(sex), first(na.omit(sex)), sex),
      value = replace_na(value, 0),
      N = if_else(is.na(N), first(na.omit(N)), N),
      variable = if_else(is.na(variable), first(na.omit(variable)), variable),
      
    ) |>
    ungroup()
  
  # Remove prior data and add back in
  diet_df <- diet_df |>
    filter(variable != var) |>
    rbind(diet_df_temp)
  
}


rf_df <- rbind(rf_df, diet_df)

```

### NDNS - Averages
```{r}

diet_df_cnt <- diet_data_gen_continuous(filepath = "../../../Data", user_options)
rf_df <- rbind(rf_df, diet_df_cnt)

```

### NDNS - Category Means
```{r}

diet_df_cat_mean <- diet_data_gen_cat_mean(filepath = "../../../Data", user_options) |>
  ungroup()

test <- diet_df_cat_mean

# Go through variables and ensure that complete categories are provided
# This code assumes that across all the strata, each category is represented at least once - if this is nto the case will change to a manual specification
for(var in unique(diet_df_cat_mean$variable)){
  
  # Get categories
  categories <- diet_df_cat_mean |>
    filter(variable == var) |>
    pull(level) |>
    unique()
  
  # Complete categories for variable
  diet_df_cat_mean_temp <- diet_df_cat_mean |>
    filter(variable == var) |>
    complete(age_group, sex, year, level = categories) |>
    group_by(age_group, sex, year) |>
    mutate(
      
      year = if_else(is.na(year), first(na.omit(year)), year),
      age_group = if_else(is.na(age_group), first(na.omit(age_group)), age_group),
      sex = if_else(is.na(sex), first(na.omit(sex)), sex),
      N = if_else(is.na(N), first(na.omit(N)), N),
      variable = if_else(is.na(variable), first(na.omit(variable)), variable),
      
    ) |>
    ungroup()
  
  # Remove prior data and add back in
  diet_df_cat_mean <- diet_df_cat_mean |>
    filter(variable != var) |>
    rbind(diet_df_cat_mean_temp)
  
}

rf_df <- rbind(rf_df, diet_df_cat_mean)

```

### Output data
```{r}

write.csv(rf_df, file = paste0("../../../Data/Cleaned_Data/clean_rf_data", if_else(!user_options$age_groups_indicator, "_age_all", ""), if_else(user_options$imd_stratification, "_imd", ""), ".csv"), row.names = F)

```


#### Timer
```{r}

end.time = Sys.time()

end.time - start.time

```

